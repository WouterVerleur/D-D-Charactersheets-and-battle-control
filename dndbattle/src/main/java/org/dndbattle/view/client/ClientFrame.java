/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.dndbattle.view.client;

import static org.dndbattle.utils.Settings.CLIENT_LOCATION_X;
import static org.dndbattle.utils.Settings.CLIENT_LOCATION_Y;
import static org.dndbattle.utils.Settings.CLIENT_SIZE_HEIGHT;
import static org.dndbattle.utils.Settings.CLIENT_SIZE_STATE;
import static org.dndbattle.utils.Settings.CLIENT_SIZE_WIDTH;

import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.util.List;

import javax.swing.JPanel;

import org.dndbattle.core.IHost;
import org.dndbattle.core.IHostConnectionInfo;
import org.dndbattle.objects.ICombatant;
import org.dndbattle.view.client.character.ClientCharacterPanel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Wouter
 */
public final class ClientFrame extends AbstractClientFrame {

  private static final Logger log = LoggerFactory.getLogger(ClientFrame.class);

  public ClientFrame(IHost host, String ip) {
    super(host, ip);
    initComponents();
    Rectangle screenBounds = getScreenBounds();
    final Rectangle bounds = this.getBounds();
    if (!screenBounds.contains(bounds)) {
      log.debug("Frame brounds [{}] are not within screen bounds [{}]", bounds, screenBounds);
      setLocationRelativeTo(null);
    }
  }

  private Rectangle getScreenBounds() {
    Rectangle bounds = new Rectangle(0, 0, 0, 0);
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    GraphicsDevice lstGDs[] = ge.getScreenDevices();
    for (GraphicsDevice gd : lstGDs) {
      bounds.add(gd.getDefaultConfiguration().getBounds());
    }
    return bounds;
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    spClient = new javax.swing.JSplitPane();
    spCombatants = new javax.swing.JScrollPane();
    pCombatants = new javax.swing.JPanel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    addComponentListener(new java.awt.event.ComponentAdapter() {
      public void componentMoved(java.awt.event.ComponentEvent evt) {
        formComponentMoved(evt);
      }
      public void componentResized(java.awt.event.ComponentEvent evt) {
        formComponentResized(evt);
      }
    });

    spClient.setDividerLocation(1d);

    spCombatants.setBorder(null);
    spCombatants.setName("Battle"); // NOI18N

    pCombatants.setLayout(new javax.swing.BoxLayout(pCombatants, javax.swing.BoxLayout.Y_AXIS));
    spCombatants.setViewportView(pCombatants);

    spClient.setLeftComponent(spCombatants);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(spClient, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(spClient, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
    );

    //spClient.setLeftComponent(spCombatants);

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void formComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentMoved
    if (getExtendedState() == NORMAL) {
      getClient().setProperty(CLIENT_LOCATION_X, getLocation().x);
      getClient().setProperty(CLIENT_LOCATION_Y, getLocation().y);
    }
    }//GEN-LAST:event_formComponentMoved

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
    if (getExtendedState() == NORMAL) {
      getClient().setProperty(CLIENT_SIZE_WIDTH, getWidth());
      getClient().setProperty(CLIENT_SIZE_HEIGHT, getHeight());
    }
    if (getExtendedState() != ICONIFIED) {
      getClient().setProperty(CLIENT_SIZE_STATE, getExtendedState());
    }
    }//GEN-LAST:event_formComponentResized

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel pCombatants;
  private javax.swing.JSplitPane spClient;
  private javax.swing.JScrollPane spCombatants;
  // End of variables declaration//GEN-END:variables

  @Override
  public void refreshBattle(List<ICombatant> combatants, int activeIndex) {
    pCombatants.removeAll();
    log.debug("Removed all from view to leave a total of [{}] components in the view", pCombatants.getComponents().length);
    for (int i = activeIndex; i < combatants.size(); i++) {
      final ICombatant combatant = combatants.get(i);
      if (!combatant.isHidden() || combatant.isFriendly()) {
        addCombatant(combatant, i == activeIndex);
      }
    }
    for (int i = 0; i < activeIndex; i++) {
      final ICombatant combatant = combatants.get(i);
      if (!combatant.isHidden() || combatant.isFriendly()) {
        addCombatant(combatant);
      }
    }
    log.debug("Added all combatants to get a new total of [{}] components in the view", pCombatants.getComponents().length);
    if (pCombatants.getComponents().length == 0) {
      pCombatants.add(new JPanel());
    }
    pCombatants.revalidate();
  }

  @Override
  public void refreshCombatants(List<ICombatant> combatants) {
    spClient.setRightComponent(null);
    spClient.setDividerLocation(1d);
  }

  private boolean checkOwnCharacter(ICombatant combatant) {
    IHostConnectionInfo connectionInfo = getClient().getConnectionInfo();
    return connectionInfo != null && combatant.ownedbyPlayer(connectionInfo.getPlayerName());
  }

  public void createCharacterPanel(ICombatant combatant) {
    final ClientCharacterPanel panel = new ClientCharacterPanel(combatant.getCombatantCharacter());
    setRightPanel(panel);
  }

  private void setRightPanel(JPanel panel) {
    spClient.setRightComponent(panel);
    spClient.setDividerLocation(0.5);
  }

  private void addCombatant(ICombatant combatant) {
    addCombatant(combatant, false);
  }

  private void addCombatant(ICombatant combatant, boolean active) {
    log.debug("Adding {} of class {}", combatant, combatant.getClass());
    pCombatants.add(new ClientSubPanel(combatant, checkOwnCharacter(combatant) ? this : null, active));
  }

  @Override
  public void setVisible(boolean b) {
    super.setVisible(b);
  }
}
