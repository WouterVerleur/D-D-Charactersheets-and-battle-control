/*
 * Copyright (C) 2018 Wouter
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.dndbattle.view.host.character;

import static org.dndbattle.utils.Settings.EXPORT_FILESELECTION;
import static org.dndbattle.utils.Settings.EXPORT_WEAPONSELECTION;

import java.awt.Component;
import java.awt.Container;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.dndbattle.objects.ICharacter;
import org.dndbattle.objects.enums.WeaponSelection;
import org.dndbattle.objects.impl.AbstractCharacter;
import org.dndbattle.objects.impl.AbstractExtendedCharacter;
import org.dndbattle.utils.Characters;
import org.dndbattle.utils.FileExporter;
import org.dndbattle.utils.GlobalUtils;
import org.dndbattle.utils.Settings;
import org.dndbattle.view.IUpdateablePanel;
import org.dndbattle.view.comboboxes.ClassComboBox;
import org.dndbattle.view.host.HostCharactersPanel;
import org.dndbattle.view.host.character.abiliyAndSkill.AbilityAndSkillPanel;
import org.dndbattle.view.host.character.equipment.EquipmentPanel;
import org.dndbattle.view.host.character.extendedCharacter.ExtendedCharacterPanel;
import org.dndbattle.view.host.character.spells.SpellOverviewPanel;
import org.dndbattle.view.host.character.weapon.CharacterWeaponPanel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Wouter
 */
public class CharacterPanel extends javax.swing.JPanel implements IUpdateablePanel {

    private static final Settings SETTINGS = Settings.getInstance();

    private static final Logger log = LoggerFactory.getLogger(CharacterPanel.class);

    private final AbstractCharacter character;
    private final HostCharactersPanel presetPanel;

    public CharacterPanel(AbstractCharacter character) {
        this(character, null);
    }

    public CharacterPanel(AbstractCharacter character, HostCharactersPanel presetPanel) {
        this.character = character;
        this.presetPanel = presetPanel;
        initComponents();
    }

    public void updateAll() {
        update();
    }

    public int getCurrentTab() {
        return tpCharacterPages.getSelectedIndex();
    }

    public void setCurrentTab(int currentTab) {
        tpCharacterPages.setSelectedIndex(currentTab);
    }

    @Override
    public void update() {
        recursiveUpdate(tpCharacterPages);
    }

    private void recursiveUpdate(Container parent) {
        for (Component component : parent.getComponents()) {
            log.debug("Attempting update of [{}]", component);
            if (component instanceof IUpdateablePanel) {
                ((IUpdateablePanel) component).update();
            } else if (component instanceof Container) {
                recursiveUpdate((Container) component);
            }
        }
    }

    private void createTabs() {
        tpCharacterPages.addTab("Abilities", new JScrollPane(new AbilityAndSkillPanel(character, this)));
        if (character instanceof AbstractExtendedCharacter) {
            tpCharacterPages.addTab("Character", new ExtendedCharacterPanel((AbstractExtendedCharacter) character, this));
        }
        tpCharacterPages.addTab("Weapons", new CharacterWeaponPanel(character));
        tpCharacterPages.addTab("Spells", new SpellOverviewPanel(character));
        tpCharacterPages.addTab("Equipment", new EquipmentPanel(character));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lName = new javax.swing.JLabel();
        bChangeType = new javax.swing.JButton();
        bWebsite = new javax.swing.JButton();
        bExportPDF = new javax.swing.JButton();
        bRename = new javax.swing.JButton();
        bDelete = new javax.swing.JButton();
        bExportHTML = new javax.swing.JButton();
        tpCharacterPages = new javax.swing.JTabbedPane();

        setLayout(new java.awt.GridBagLayout());

        lName.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lName.setText(character.getName());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(lName, gridBagConstraints);

        bChangeType.setText("Change type");
        bChangeType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bChangeTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(bChangeType, gridBagConstraints);

        bWebsite.setText("Website");
        bWebsite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bWebsiteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(bWebsite, gridBagConstraints);

        bExportPDF.setText("Export PDF");
        bExportPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExportPDFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(bExportPDF, gridBagConstraints);

        bRename.setText("Rename");
        bRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRenameActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(bRename, gridBagConstraints);

        bDelete.setText("Delete");
        bDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(bDelete, gridBagConstraints);

        bExportHTML.setText("Export HTML");
        bExportHTML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExportHTMLActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(bExportHTML, gridBagConstraints);

        tpCharacterPages.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        tpCharacterPages.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        createTabs();

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(tpCharacterPages, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void bWebsiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bWebsiteActionPerformed
        GlobalUtils.browseCharacter(character);
    }//GEN-LAST:event_bWebsiteActionPerformed

    private void bRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRenameActionPerformed
        String newName = JOptionPane.showInputDialog(this, "Please enter the new name", "Rename", JOptionPane.QUESTION_MESSAGE, null, null, character.getName()).toString();
        if (newName != null && !newName.isEmpty() && !newName.equalsIgnoreCase(character.getName())) {
            ICharacter newChar = character.clone();
            if (newChar instanceof AbstractCharacter) {
                ((AbstractCharacter) newChar).setName(newName);
                if (Characters.getInstance().add(newChar)) {
                    Characters.getInstance().remove(character);
                }
            }
            presetPanel.updateList();
        }
    }//GEN-LAST:event_bRenameActionPerformed

    private void bDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure you wish to remove " + character + "?\nThis cannot be undone!",
                "Confirmation", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            Characters.getInstance().remove(character);
        }
        presetPanel.updateList(true);
    }//GEN-LAST:event_bDeleteActionPerformed

    private void bChangeTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bChangeTypeActionPerformed
        ClassComboBox comboBox = new ClassComboBox();
        comboBox.setSelectedItem(character.getClass());
        JOptionPane.showMessageDialog(this, comboBox, "Please select the new type", JOptionPane.QUESTION_MESSAGE);
        Class<? extends ICharacter> selection = comboBox.getSelectedItem();
        if (selection != null && selection != character.getClass()
                && JOptionPane.showConfirmDialog(this, "Are you sure you wish to change " + character + " into a " + selection.getSimpleName() + ". Some information may be lost in the process.", "Please confirm change", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            try {
                ICharacter newChar = selection.getDeclaredConstructor(ICharacter.class).newInstance(character);
                if (Characters.getInstance().add(newChar)) {
                    Characters.getInstance().remove(character);
                }
            } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
                log.error("Woops this went wrong", e);
            }
        }
        presetPanel.updateList();
    }//GEN-LAST:event_bChangeTypeActionPerformed

    private void bExportPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExportPDFActionPerformed
        File file = requestFile("pdf");
        if (file != null) {
            WeaponSelection weaponSelection = requestWeaponSelection();
            if (weaponSelection != null) {
                try {
                    FileExporter.createPDF(character, weaponSelection, file);
                } catch (Exception e) {
                    log.error("Exception while creating export for character [{}]", character, e);
                    JOptionPane.showMessageDialog(this, "Unable to export the file.\nThe error was:\n" + e.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_bExportPDFActionPerformed

    private void bExportHTMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExportHTMLActionPerformed
        File file = requestFile("html");
        if (file != null) {
            WeaponSelection weaponSelection = requestWeaponSelection();
            if (weaponSelection != null) {
                try {
                    FileExporter.createHTML(character, weaponSelection, file);
                } catch (IOException e) {
                    log.error("Exception while creating export for character [{}]", character, e);
                    JOptionPane.showMessageDialog(this, "Unable to export the file.\nThe error was:\n" + e.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_bExportHTMLActionPerformed

    private File requestFile(String extension) {
        File startLocation = new File(SETTINGS.getProperty(EXPORT_FILESELECTION, System.getProperty("user.home")), character.getSaveFileName() + '.' + extension);
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(startLocation.getParentFile());
        chooser.setSelectedFile(startLocation);
        chooser.setMultiSelectionEnabled(false);
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setFileFilter(new FileNameExtensionFilter(extension.toUpperCase() + " Files", extension));
        log.debug("Opening filechooser for directory [{}]", startLocation);
        int selection = chooser.showDialog(this, "Select export file");
        if (selection != JFileChooser.APPROVE_OPTION) {
            return null;
        }
        File file = chooser.getSelectedFile();

        if (file != null) {
            if (file.isDirectory()) {
                SETTINGS.setProperty(EXPORT_FILESELECTION, file.getAbsolutePath());
                file = new File(file, character.getSaveFileName() + '.' + extension);
            } else {
                SETTINGS.setProperty(EXPORT_FILESELECTION, file.getParent());
            }
        }
        return file;
    }

    private WeaponSelection requestWeaponSelection() {
        WeaponSelection initialSelection;
        try {
            initialSelection = WeaponSelection.valueOf(SETTINGS.getProperty(EXPORT_WEAPONSELECTION, WeaponSelection.ALL.name()));
        } catch (IllegalArgumentException e) {
            initialSelection = null;
        }
        WeaponSelection selection = (WeaponSelection) JOptionPane.showInputDialog(this, "What weapons do you want in the export?", "Weapon selection", JOptionPane.QUESTION_MESSAGE, null, WeaponSelection.values(), initialSelection);
        if (selection != null) {
            SETTINGS.setProperty(EXPORT_WEAPONSELECTION, selection.name());
        }
        return selection;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bChangeType;
    private javax.swing.JButton bDelete;
    private javax.swing.JButton bExportHTML;
    private javax.swing.JButton bExportPDF;
    private javax.swing.JButton bRename;
    private javax.swing.JButton bWebsite;
    private javax.swing.JLabel lName;
    private javax.swing.JTabbedPane tpCharacterPages;
    // End of variables declaration//GEN-END:variables

}
