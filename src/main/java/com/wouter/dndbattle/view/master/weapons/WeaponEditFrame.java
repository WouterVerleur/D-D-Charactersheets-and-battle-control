/*
 * Copyright (C) 2018 Wouter
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.wouter.dndbattle.view.master.weapons;

import com.wouter.dndbattle.objects.enums.WeaponRange;
import com.wouter.dndbattle.objects.impl.Weapon;
import com.wouter.dndbattle.utils.Weapons;
import com.wouter.dndbattle.view.IUpdateablePanel;

/**
 *
 * @author Wouter
 */
public class WeaponEditFrame extends javax.swing.JFrame {

    private final Weapon weapon;
    private final IUpdateablePanel parent;

    public WeaponEditFrame(Weapon weapon, IUpdateablePanel parent) {
        this.weapon = weapon;
        this.parent = parent;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lName = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        lDamage = new javax.swing.JLabel();
        sDiceAmount = new javax.swing.JSpinner();
        cbDice = new com.wouter.dndbattle.view.comboboxes.DiceComboBox();
        tfDamage = new javax.swing.JTextField();
        lRange = new javax.swing.JLabel();
        cbRange = new com.wouter.dndbattle.view.comboboxes.WeaponRangeComboBox();
        sRange = new javax.swing.JSpinner();
        lSlash = new javax.swing.JLabel();
        sMaxRange = new javax.swing.JSpinner();
        cbFinesse = new javax.swing.JCheckBox();
        cbTwoHanded = new javax.swing.JCheckBox();
        cbLoading = new javax.swing.JCheckBox();
        cbCanUseMagicStats = new javax.swing.JCheckBox();
        lWeight = new javax.swing.JLabel();
        cbWeight = new com.wouter.dndbattle.view.comboboxes.WeaponWeightComboBox();
        lAttackModifier = new javax.swing.JLabel();
        sAttackModifier = new javax.swing.JSpinner();
        lDamageModifier = new javax.swing.JLabel();
        sDamageModifier = new javax.swing.JSpinner();
        lNotes = new javax.swing.JLabel();
        tfNotes = new javax.swing.JTextField();
        bCancel = new javax.swing.JButton();
        bSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        lName.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(lName, gridBagConstraints);

        tfName.setText(weapon.getName());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(tfName, gridBagConstraints);

        lDamage.setText("Damage");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(lDamage, gridBagConstraints);

        sDiceAmount.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        sDiceAmount.setValue(weapon.getAmountOfAttackDice());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(sDiceAmount, gridBagConstraints);

        cbDice.setSelectedItem(weapon.getAttackDice());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(cbDice, gridBagConstraints);

        tfDamage.setText(weapon.getDamageType());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(tfDamage, gridBagConstraints);

        lRange.setText("Range");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(lRange, gridBagConstraints);

        cbRange.setSelectedItem(weapon.getWeaponRange());
        cbRange.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbRangeItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(cbRange, gridBagConstraints);

        sRange.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(10)));
        sRange.setEnabled(weapon.getWeaponRange().isRanged());
        sRange.setValue(weapon.getRange());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(sRange, gridBagConstraints);

        lSlash.setText("/");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(lSlash, gridBagConstraints);

        sMaxRange.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(10)));
        sMaxRange.setEnabled(weapon.getWeaponRange().isRanged());
        sMaxRange.setValue(weapon.getMaxRange());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(sMaxRange, gridBagConstraints);

        cbFinesse.setSelected(weapon.isFinesse());
        cbFinesse.setText("Finesse");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(cbFinesse, gridBagConstraints);

        cbTwoHanded.setSelected(weapon.isTwoHanded());
        cbTwoHanded.setText("Two-handed");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(cbTwoHanded, gridBagConstraints);

        cbLoading.setSelected(weapon.isLoading());
        cbLoading.setText("Loading");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(cbLoading, gridBagConstraints);

        cbCanUseMagicStats.setSelected(weapon.isCanUseMagicStats());
        cbCanUseMagicStats.setText("Can use magical stats");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(cbCanUseMagicStats, gridBagConstraints);

        lWeight.setText("Weight");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(lWeight, gridBagConstraints);

        cbWeight.setSelectedItem(weapon.getWeight());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(cbWeight, gridBagConstraints);

        lAttackModifier.setText("Attack modifier");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(lAttackModifier, gridBagConstraints);

        sAttackModifier.setModel(new javax.swing.SpinnerNumberModel());
        sAttackModifier.setValue(weapon.getAttackModifier());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(sAttackModifier, gridBagConstraints);

        lDamageModifier.setText("Damage modifier");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(lDamageModifier, gridBagConstraints);

        sDamageModifier.setModel(new javax.swing.SpinnerNumberModel());
        sDamageModifier.setValue(weapon.getDamageModifier());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(sDamageModifier, gridBagConstraints);

        lNotes.setText("Notes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(lNotes, gridBagConstraints);

        tfNotes.setText(weapon.getActualNotes());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(tfNotes, gridBagConstraints);

        bCancel.setText("Cancel");
        bCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        getContentPane().add(bCancel, gridBagConstraints);

        bSave.setText("Save");
        bSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(bSave, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_bCancelActionPerformed

    private void bSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveActionPerformed
        if (tfName.getText().isEmpty()) {
            tfName.requestFocus();
            return;
        }
        String originalName = weapon.getName();

        weapon.setActualNotes(tfNotes.getText());
        weapon.setAmountOfAttackDice((Integer) sDiceAmount.getValue());
        weapon.setAttackDice(cbDice.getSelectedItem());
        weapon.setAttackModifier((Integer) sAttackModifier.getValue());
        weapon.setCanUseMagicStats(cbCanUseMagicStats.isSelected());
        weapon.setDamageModifier((Integer) sDamageModifier.getValue());
        weapon.setDamageType(tfDamage.getText());
        weapon.setFinesse(cbFinesse.isSelected());
        weapon.setLoading(cbLoading.isSelected());
        weapon.setMaxRange((Integer) sMaxRange.getValue());
        weapon.setName(tfName.getText());
        weapon.setRange((Integer) sRange.getValue());
        weapon.setTwoHanded(cbTwoHanded.isSelected());
        weapon.setWeaponRange(cbRange.getSelectedItem());
        weapon.setWeight(cbWeight.getSelectedItem());

        Weapons weapons = Weapons.getInstance();
        if (weapon.getName().equals(originalName)) {
            weapons.updateWeapon(weapon);
        } else if (weapons.addWeapon(weapon) && !originalName.isEmpty()) {
            weapons.remove(weapon);
        }
        parent.update();
        this.dispose();
    }//GEN-LAST:event_bSaveActionPerformed

    private void cbRangeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbRangeItemStateChanged
        WeaponRange selection = cbRange.getSelectedItem();
        sRange.setEnabled(selection.isRanged());
        sMaxRange.setEnabled(selection.isRanged());
    }//GEN-LAST:event_cbRangeItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCancel;
    private javax.swing.JButton bSave;
    private javax.swing.JCheckBox cbCanUseMagicStats;
    private com.wouter.dndbattle.view.comboboxes.DiceComboBox cbDice;
    private javax.swing.JCheckBox cbFinesse;
    private javax.swing.JCheckBox cbLoading;
    private com.wouter.dndbattle.view.comboboxes.WeaponRangeComboBox cbRange;
    private javax.swing.JCheckBox cbTwoHanded;
    private com.wouter.dndbattle.view.comboboxes.WeaponWeightComboBox cbWeight;
    private javax.swing.JLabel lAttackModifier;
    private javax.swing.JLabel lDamage;
    private javax.swing.JLabel lDamageModifier;
    private javax.swing.JLabel lName;
    private javax.swing.JLabel lNotes;
    private javax.swing.JLabel lRange;
    private javax.swing.JLabel lSlash;
    private javax.swing.JLabel lWeight;
    private javax.swing.JSpinner sAttackModifier;
    private javax.swing.JSpinner sDamageModifier;
    private javax.swing.JSpinner sDiceAmount;
    private javax.swing.JSpinner sMaxRange;
    private javax.swing.JSpinner sRange;
    private javax.swing.JTextField tfDamage;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfNotes;
    // End of variables declaration//GEN-END:variables
}
