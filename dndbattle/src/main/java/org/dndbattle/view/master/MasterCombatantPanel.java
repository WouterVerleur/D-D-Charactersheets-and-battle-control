/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.dndbattle.view.master;

import java.util.Iterator;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import org.dndbattle.core.impl.Master;
import org.dndbattle.objects.ICharacter;
import org.dndbattle.objects.ICombatant;
import org.dndbattle.objects.enums.AbilityType;
import org.dndbattle.objects.enums.SpellLevel;
import org.dndbattle.objects.impl.Combatant;
import org.dndbattle.utils.Characters;
import org.dndbattle.utils.GlobalUtils;
import org.dndbattle.utils.Settings;
import static org.dndbattle.utils.Settings.ROLL_FOR_DEATH;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Wouter
 */
public class MasterCombatantPanel extends javax.swing.JPanel {

    private static final Logger log = LoggerFactory.getLogger(MasterCombatantPanel.class);

    private static final Settings SETTINGS = Settings.getInstance();
    private static final String SPELL_SLOT_BUTTON_FORMAT = "Level %s (%d/%d used)";
    private static final String TITLE_FORMAT = "Initiative %d (DEX: %d)";

    private final Combatant combatant;
    private final ICharacter character;
    private final Master master;

    public MasterCombatantPanel(Master master, Combatant combatant) {
        this.master = master;
        this.combatant = combatant;
        this.character = getCombatantCharacter(combatant);
        initComponents();
        if (combatant.isDead()) {
            setBackground(GlobalUtils.getBackgroundDead());
        } else if (combatant.getHealth() == 0) {
            setBackground(GlobalUtils.getBackgroundDown());
        }
    }

    private static ICharacter getCombatantCharacter(ICombatant combatant) {
        if (combatant.isTransformed()) {
            return getCombatantCharacter(combatant.getTransformation());
        }
        return combatant.getCharacter();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lName = new javax.swing.JLabel();
        bInfo = new javax.swing.JButton();
        lDescription = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jProgressBar2 = new javax.swing.JProgressBar();
        bDamage = new javax.swing.JButton();
        bHealth = new javax.swing.JButton();
        bTempHitpoints = new javax.swing.JButton();
        bDeathRoll = new javax.swing.JButton();
        bLifeRoll = new javax.swing.JButton();
        bLeaveTransformation = new javax.swing.JButton();
        lTotalDamageRecieved = new javax.swing.JLabel();
        bTransform = new javax.swing.JButton();
        bPolyMorph = new javax.swing.JButton();
        pUseSpellSlots = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), String.format(TITLE_FORMAT, combatant.getInitiative(), combatant.getCharacter().getAbilityScore(AbilityType.DEX)), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        lName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lName.setText(combatant.getFriendlyName());

        bInfo.setText("Information");
        bInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInfoActionPerformed(evt);
            }
        });

        lDescription.setText(combatant.getFriendlyDescription());

        jProgressBar1.setMaximum(character.getMaxHealth());
        jProgressBar1.setValue(combatant.getHealth());
        jProgressBar1.setString(combatant.getHealthString());
        jProgressBar1.setStringPainted(true);

        jProgressBar2.setMaximum(1);
        jProgressBar2.setValue(combatant.getHealthBuff());
        jProgressBar2.setString(combatant.getHealthBuff()>0?"+"+combatant.getHealthBuff():" ");
        jProgressBar2.setStringPainted(true);

        bDamage.setText("Give damage");
        bDamage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDamageActionPerformed(evt);
            }
        });

        bHealth.setText("Give health");
        bHealth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bHealthActionPerformed(evt);
            }
        });

        bTempHitpoints.setText("Set temporary hitpoints");
        bTempHitpoints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTempHitpointsActionPerformed(evt);
            }
        });

        bDeathRoll.setText("Add death roll");
        bDeathRoll.setEnabled(SETTINGS.getProperty(ROLL_FOR_DEATH, true));
        bDeathRoll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeathRollActionPerformed(evt);
            }
        });

        bLifeRoll.setText("Add life roll");
        bLifeRoll.setEnabled(SETTINGS.getProperty(ROLL_FOR_DEATH, true));
        bLifeRoll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLifeRollActionPerformed(evt);
            }
        });

        bLeaveTransformation.setText("Leave transformation");
        bLeaveTransformation.setEnabled(combatant.isTransformed());
        bLeaveTransformation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLeaveTransformationActionPerformed(evt);
            }
        });

        lTotalDamageRecieved.setText(combatant.getTotalDamageString());

        bTransform.setText("Transform");
        bTransform.setEnabled(checkCanTransform(combatant));
        bTransform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTransformActionPerformed(evt);
            }
        });

        bPolyMorph.setText("Polymorph");
        bPolyMorph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPolyMorphActionPerformed(evt);
            }
        });

        pUseSpellSlots.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Use spell slot", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        pUseSpellSlots.setLayout(new javax.swing.BoxLayout(pUseSpellSlots, javax.swing.BoxLayout.X_AXIS));
        createUseSpellSlotButtons();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pUseSpellSlots, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bInfo))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bDeathRoll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bDamage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bHealth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bLifeRoll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bTransform, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bPolyMorph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(2, 2, 2))
                            .addComponent(lTotalDamageRecieved, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bLeaveTransformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bTempHitpoints, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bInfo)
                    .addComponent(lName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lDescription)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bHealth)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bDamage)
                        .addComponent(lTotalDamageRecieved)
                        .addComponent(bTempHitpoints)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bDeathRoll)
                    .addComponent(bLifeRoll)
                    .addComponent(bTransform)
                    .addComponent(bPolyMorph)
                    .addComponent(bLeaveTransformation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pUseSpellSlots, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bDamageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDamageActionPerformed
        combatant.giveDamage(requestNumber("damage"));
        master.updateAll(false);
    }//GEN-LAST:event_bDamageActionPerformed

    private void bHealthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bHealthActionPerformed
        combatant.giveHeal(requestNumber("health"));
        master.updateAll(false);
    }//GEN-LAST:event_bHealthActionPerformed

    private void bTempHitpointsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTempHitpointsActionPerformed
        combatant.setHealthBuff(requestNumber("temporary hitpoints"));
        master.updateAll(false);
    }//GEN-LAST:event_bTempHitpointsActionPerformed

    private void bDeathRollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeathRollActionPerformed
        combatant.addDeathRoll();
        master.updateAll(false);
    }//GEN-LAST:event_bDeathRollActionPerformed

    private void bLifeRollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLifeRollActionPerformed
        combatant.addLifeRoll();
        master.updateAll(false);
    }//GEN-LAST:event_bLifeRollActionPerformed

    private void bLeaveTransformationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLeaveTransformationActionPerformed
        if (combatant.isTransformed()) {
            combatant.leaveTransformation();
        }
        master.updateAll(false);
    }//GEN-LAST:event_bLeaveTransformationActionPerformed

    private void bTransformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTransformActionPerformed
        if (checkCanTransform(combatant)) {
            List<ICharacter> characters = Characters.getInstance().getCharacters(character.getTransformType());
            for (Iterator<ICharacter> iterator = characters.iterator(); iterator.hasNext();) {
                if (checkChallengeRatingToHigh(iterator.next())) {
                    iterator.remove();
                }
            }
            ICharacter[] presets = characters.toArray(new ICharacter[characters.size()]);
            Object selection = JOptionPane.showInputDialog(this, "Message", "Title", JOptionPane.QUESTION_MESSAGE, null, presets, null);
            if (selection != null) {
                combatant.transform((ICharacter) selection, false);
                master.updateAll(true);
            }
        }
    }//GEN-LAST:event_bTransformActionPerformed

    private boolean checkChallengeRatingToHigh(ICharacter transformation) {
        if (transformation.getChallengeRating() == null) {
            return false;
        }
        if (character.getTransformChallengeRating() == null) {
            return true;
        }
        return transformation.getChallengeRating().compareTo(character.getTransformChallengeRating()) > 0;
    }

    private void bPolyMorphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPolyMorphActionPerformed
        CombatantSelectionPanel selectionPanel = new CombatantSelectionPanel();
        switch (JOptionPane.showConfirmDialog(this, selectionPanel, "Select character", JOptionPane.OK_CANCEL_OPTION)) {
            case JOptionPane.OK_OPTION:
                ICharacter selection = selectionPanel.getSelection();
                combatant.transform(selection, true);
                master.updateAll(true);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_bPolyMorphActionPerformed

    private void bInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInfoActionPerformed
        master.getFrame().setBattleTab(combatant.getCharacter().getName());
    }//GEN-LAST:event_bInfoActionPerformed

    private int requestNumber(String description) {
        int value = 0;
        String input = JOptionPane.showInputDialog(this, "Please enter the amount of " + description + " should be given to " + combatant, "Please enter a number.", JOptionPane.QUESTION_MESSAGE);
        if (input != null && !input.isEmpty()) {
            try {
                value = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                log.error("The input [{}] could not be parsed as a number.", input, e);
                JOptionPane.showMessageDialog(this, "Your input " + input + " is not a valid number.\nTo cancel enter 0.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        return value;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bDamage;
    private javax.swing.JButton bDeathRoll;
    private javax.swing.JButton bHealth;
    private javax.swing.JButton bInfo;
    private javax.swing.JButton bLeaveTransformation;
    private javax.swing.JButton bLifeRoll;
    private javax.swing.JButton bPolyMorph;
    private javax.swing.JButton bTempHitpoints;
    private javax.swing.JButton bTransform;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JLabel lDescription;
    private javax.swing.JLabel lName;
    private javax.swing.JLabel lTotalDamageRecieved;
    private javax.swing.JPanel pUseSpellSlots;
    // End of variables declaration//GEN-END:variables

    private boolean checkCanTransform(Combatant combatant) {
        if (combatant.isTransformed()) {
            return checkCanTransform(combatant.getTransformation());
        }
        return combatant.getCharacter().isCanTransform();
    }

    private void createUseSpellSlotButtons() {
        int totalSpellSlots = 0;
        int totalUsedSpellSlots = 0;
        for (SpellLevel level : SpellLevel.values()) {
            if (level != SpellLevel.CANTRIP && level != SpellLevel.FEATURE) {
                final int spellSlots = combatant.getCharacter().getSpellSlotsByLevel(level);
                final int usedSpellSlots = combatant.getUsedSpellSlots(level);

                totalSpellSlots += spellSlots;
                totalUsedSpellSlots += usedSpellSlots;

                if (spellSlots > 0) {
                    JButton button = new JButton(String.format(SPELL_SLOT_BUTTON_FORMAT, level.toString(), usedSpellSlots, spellSlots));
                    button.addActionListener((evt) -> {
                        combatant.useSpellSlot(level);
                        master.updateAll(false);
                    });
                    button.setEnabled(usedSpellSlots < spellSlots);
                    pUseSpellSlots.add(button);
                }
            }
        }
        if (totalSpellSlots > 0) {
            JButton reset = new JButton("Reset");
            reset.addActionListener((evt) -> {
                combatant.resetSpellSlots();
                master.updateAll(false);
            });
            reset.setEnabled(totalUsedSpellSlots > 0);
            pUseSpellSlots.add(reset);
        } else {
            pUseSpellSlots.setVisible(false);
        }
    }
}
