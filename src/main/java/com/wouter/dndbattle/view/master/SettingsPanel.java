/*
 * Copyright (C) 2018 Wouter
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.wouter.dndbattle.view.master;

import java.awt.event.ItemEvent;
import java.io.File;

import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

import com.wouter.dndbattle.core.Main;
import com.wouter.dndbattle.utils.FileManager;
import com.wouter.dndbattle.utils.Settings;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static com.wouter.dndbattle.utils.FileWriterThread.DEFAULT_TIMEOUT;
import static com.wouter.dndbattle.utils.Settings.FILE_WRITER_SAVE_TIMEOUT;
import static com.wouter.dndbattle.utils.Settings.INPUT_FILESELECTION;
import static com.wouter.dndbattle.utils.Settings.LOOKANDFEEL;
import static com.wouter.dndbattle.utils.Settings.MASTER_TITLE;
import static com.wouter.dndbattle.utils.Settings.PRESETFOLDER;
import static com.wouter.dndbattle.utils.Settings.ROLLFORDEATH;
import static com.wouter.dndbattle.utils.Settings.SLAVE_TITLE;

/**
 *
 * @author Wouter
 */
public class SettingsPanel extends javax.swing.JPanel {

    private static final Logger log = LoggerFactory.getLogger(SettingsPanel.class);

    private static final Settings SETTINGS = Settings.getInstance();

    private static final String IP_FORMAT = "Your connection is on port %d and your IP is: %s";
    private final String ipaddressText;

    /**
     * Creates new form SettingsPanel
     */
    public SettingsPanel() {
        this.ipaddressText = String.format(IP_FORMAT, Main.getPort(), Main.getIp());
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        bgRollForDeath = new javax.swing.ButtonGroup();
        lMasterTitle = new javax.swing.JLabel();
        tfMasterTitle = new javax.swing.JTextField();
        lSlaveTitle = new javax.swing.JLabel();
        tfSlaveTitle = new javax.swing.JTextField();
        bSaveSettings = new javax.swing.JButton();
        lIp = new javax.swing.JLabel();
        lLookAndFeel = new javax.swing.JLabel();
        cbLookAndFeel = new javax.swing.JComboBox();
        lRollForDeath = new javax.swing.JLabel();
        rbRollForDeath = new javax.swing.JRadioButton();
        rbAutomaticDeath = new javax.swing.JRadioButton();
        lPresetFolder = new javax.swing.JLabel();
        tfPresetFolder = new javax.swing.JTextField();
        bPresetFolder = new javax.swing.JButton();
        bReset = new javax.swing.JButton();
        lSaveTimeout = new javax.swing.JLabel();
        sSaveTimeout = new javax.swing.JSpinner();

        setLayout(new java.awt.GridBagLayout());

        lMasterTitle.setText("Master frame title");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 2, 2);
        add(lMasterTitle, gridBagConstraints);

        tfMasterTitle.setText(SETTINGS.getProperty(MASTER_TITLE, "Master")
        );
        tfMasterTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfMasterTitleActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 2, 5);
        add(tfMasterTitle, gridBagConstraints);

        lSlaveTitle.setText("Slave frame title");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 2, 2);
        add(lSlaveTitle, gridBagConstraints);

        tfSlaveTitle.setText(SETTINGS.getProperty(SLAVE_TITLE, "Slave")
        );
        tfSlaveTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSlaveTitleActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 2, 5);
        add(tfSlaveTitle, gridBagConstraints);

        bSaveSettings.setText("Save");
        bSaveSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveSettingsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 2, 5);
        add(bSaveSettings, gridBagConstraints);

        lIp.setText(ipaddressText);
        lIp.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 5, 5);
        add(lIp, gridBagConstraints);

        lLookAndFeel.setText("Look and feel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 2, 2);
        add(lLookAndFeel, gridBagConstraints);

        cbLookAndFeel.setModel(getLookAndFeelModel());
        cbLookAndFeel.setSelectedItem(SETTINGS.getProperty(LOOKANDFEEL, "Nimbus")
        );
        cbLookAndFeel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbLookAndFeelItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 2, 5);
        add(cbLookAndFeel, gridBagConstraints);

        lRollForDeath.setText("Death roll style");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 2, 2);
        add(lRollForDeath, gridBagConstraints);

        bgRollForDeath.add(rbRollForDeath);
        rbRollForDeath.setSelected(SETTINGS.getProperty(ROLLFORDEATH, true)
        );
        rbRollForDeath.setText("Roll for life and death");
        rbRollForDeath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbRollForDeathActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 2, 2);
        add(rbRollForDeath, gridBagConstraints);

        bgRollForDeath.add(rbAutomaticDeath);
        rbAutomaticDeath.setSelected(!SETTINGS.getProperty(ROLLFORDEATH, true)
        );
        rbAutomaticDeath.setText("Automatic death");
        rbAutomaticDeath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAutomaticDeathActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 2, 2);
        add(rbAutomaticDeath, gridBagConstraints);

        lPresetFolder.setText("Folder for presets");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 2, 2);
        add(lPresetFolder, gridBagConstraints);

        tfPresetFolder.setText(FileManager.getPresetFolder().getPath());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 2, 2);
        add(tfPresetFolder, gridBagConstraints);

        bPresetFolder.setText("Browse");
        bPresetFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPresetFolderActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 2, 5);
        add(bPresetFolder, gridBagConstraints);

        bReset.setText("Reset");
        bReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bResetActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 2, 2);
        add(bReset, gridBagConstraints);

        lSaveTimeout.setText("Save timeout (sec)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 2, 2);
        add(lSaveTimeout, gridBagConstraints);

        sSaveTimeout.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        sSaveTimeout.setValue(SETTINGS.getProperty(FILE_WRITER_SAVE_TIMEOUT, DEFAULT_TIMEOUT));
        sSaveTimeout.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sSaveTimeoutStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 2, 5);
        add(sSaveTimeout, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void tfSlaveTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSlaveTitleActionPerformed
        save();
    }//GEN-LAST:event_tfSlaveTitleActionPerformed

    private void bSaveSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveSettingsActionPerformed
        save();
    }//GEN-LAST:event_bSaveSettingsActionPerformed

    private void save() {
        SETTINGS.setProperty(MASTER_TITLE, tfMasterTitle.getText());
        SETTINGS.setProperty(SLAVE_TITLE, tfSlaveTitle.getText());
        Object oldLookAndFeel = SETTINGS.setProperty(LOOKANDFEEL, (String) cbLookAndFeel.getSelectedItem());
        SETTINGS.setProperty(ROLLFORDEATH, rbRollForDeath.isSelected());
        Object oldPresetFolder = SETTINGS.setProperty(PRESETFOLDER, tfPresetFolder.getText());
        SETTINGS.setProperty(FILE_WRITER_SAVE_TIMEOUT, (int) sSaveTimeout.getValue());
        if (checkValues(oldLookAndFeel, cbLookAndFeel.getSelectedItem()) || checkValues(oldPresetFolder, tfPresetFolder.getText())) {
            JOptionPane.showMessageDialog(this, "Some settings require a restart to take effect.", "Settings saved.", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private boolean checkValues(Object oldValue, Object newValue) {
        return oldValue == null || !oldValue.equals(newValue);
    }

    private void rbRollForDeathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbRollForDeathActionPerformed
        save();
    }//GEN-LAST:event_rbRollForDeathActionPerformed

    private void rbAutomaticDeathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAutomaticDeathActionPerformed
        save();
    }//GEN-LAST:event_rbAutomaticDeathActionPerformed

    private void bPresetFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPresetFolderActionPerformed
        File newPresetFolder = selectFile();
        if (newPresetFolder != null) {
            tfPresetFolder.setText(newPresetFolder.getPath());
            save();
        }
    }//GEN-LAST:event_bPresetFolderActionPerformed

    private void bResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bResetActionPerformed
        int option = JOptionPane.showConfirmDialog(this, "This will reset all presets.\nAre you sure?", "Please confirm!", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (option == JOptionPane.YES_OPTION) {
            SETTINGS.clear();
        }
    }//GEN-LAST:event_bResetActionPerformed

    private void cbLookAndFeelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbLookAndFeelItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            save();
        }
    }//GEN-LAST:event_cbLookAndFeelItemStateChanged

    private void tfMasterTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfMasterTitleActionPerformed
        save();
    }//GEN-LAST:event_tfMasterTitleActionPerformed

    private void sSaveTimeoutStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sSaveTimeoutStateChanged
        save();
    }//GEN-LAST:event_sSaveTimeoutStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bPresetFolder;
    private javax.swing.JButton bReset;
    private javax.swing.JButton bSaveSettings;
    private javax.swing.ButtonGroup bgRollForDeath;
    private javax.swing.JComboBox cbLookAndFeel;
    private javax.swing.JLabel lIp;
    private javax.swing.JLabel lLookAndFeel;
    private javax.swing.JLabel lMasterTitle;
    private javax.swing.JLabel lPresetFolder;
    private javax.swing.JLabel lRollForDeath;
    private javax.swing.JLabel lSaveTimeout;
    private javax.swing.JLabel lSlaveTitle;
    private javax.swing.JRadioButton rbAutomaticDeath;
    private javax.swing.JRadioButton rbRollForDeath;
    private javax.swing.JSpinner sSaveTimeout;
    private javax.swing.JTextField tfMasterTitle;
    private javax.swing.JTextField tfPresetFolder;
    private javax.swing.JTextField tfSlaveTitle;
    // End of variables declaration//GEN-END:variables

    private ComboBoxModel getLookAndFeelModel() {
        UIManager.LookAndFeelInfo[] installedLookAndFeels = UIManager.getInstalledLookAndFeels();
        String[] lookAndFeelNames = new String[installedLookAndFeels.length];
        for (int i = 0; i < installedLookAndFeels.length; i++) {
            UIManager.LookAndFeelInfo installedLookAndFeel = installedLookAndFeels[i];
            lookAndFeelNames[i] = installedLookAndFeel.getName();
        }
        return new DefaultComboBoxModel(lookAndFeelNames);
    }

    public File selectFile() {
        JFileChooser chooser = new JFileChooser(FileManager.getPresetFolder());
        chooser.setMultiSelectionEnabled(false);
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        log.debug("Opening filechooser for directory [{}]", chooser.getCurrentDirectory());
        int selection = chooser.showDialog(this, "Select preset folder");
        if (selection != JFileChooser.APPROVE_OPTION) {
            return null;
        }
        File file = chooser.getSelectedFile();
        if (file != null) {
            if (file.isDirectory()) {

            }
            SETTINGS.setProperty(INPUT_FILESELECTION, file.getParent());
        }
        return chooser.getSelectedFile();
    }
}
