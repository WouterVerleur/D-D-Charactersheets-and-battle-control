/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.wouter.dndbattle.view.slave;

import static com.wouter.dndbattle.utils.Settings.SLAVE_LOCATION_X;
import static com.wouter.dndbattle.utils.Settings.SLAVE_LOCATION_Y;
import static com.wouter.dndbattle.utils.Settings.SLAVE_SIZE_HEIGHT;
import static com.wouter.dndbattle.utils.Settings.SLAVE_SIZE_STATE;
import static com.wouter.dndbattle.utils.Settings.SLAVE_SIZE_WIDTH;

import java.util.List;

import javax.swing.JPanel;

import com.wouter.dndbattle.core.IMaster;
import com.wouter.dndbattle.core.IMasterConnectionInfo;
import com.wouter.dndbattle.core.ISlave;
import com.wouter.dndbattle.core.impl.Slave;
import com.wouter.dndbattle.objects.ICharacter;
import com.wouter.dndbattle.objects.ICombatant;
import com.wouter.dndbattle.view.slave.character.SlaveCharacterPanel;

import java.awt.Component;
import java.util.ArrayList;
import java.util.Collections;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Wouter
 */
public class SlaveFrame extends javax.swing.JFrame {

    private static final Logger log = LoggerFactory.getLogger(SlaveFrame.class);

    private final Slave slave;

    public SlaveFrame(IMaster master) {
        this.slave = new Slave(master, this);
        initComponents();
        int x = slave.getProperty(SLAVE_LOCATION_X, 0);
        int y = slave.getProperty(SLAVE_LOCATION_Y, 0);
        setLocation(x, y);
        int width = slave.getProperty(SLAVE_SIZE_WIDTH, getPreferredSize().width);
        int height = slave.getProperty(SLAVE_SIZE_HEIGHT, getPreferredSize().width);
        setSize(width, height);
        setExtendedState(slave.getProperty(SLAVE_SIZE_STATE, 0));
    }

    public ISlave getSlave() {
        return slave;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tpSelection = new javax.swing.JTabbedPane();
        spCombatants = new javax.swing.JScrollPane();
        pCombatants = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                formComponentMoved(evt);
            }
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        pCombatants.setLayout(new javax.swing.BoxLayout(pCombatants, javax.swing.BoxLayout.Y_AXIS));
        spCombatants.setViewportView(pCombatants);

        tpSelection.addTab("Battle", spCombatants);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpSelection, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpSelection, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentMoved
        if (getExtendedState() == NORMAL) {
            slave.setProperty(SLAVE_LOCATION_X, getLocation().x);
            slave.setProperty(SLAVE_LOCATION_Y, getLocation().y);
        }
    }//GEN-LAST:event_formComponentMoved

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        if (getExtendedState() == NORMAL) {
            slave.setProperty(SLAVE_SIZE_WIDTH, getWidth());
            slave.setProperty(SLAVE_SIZE_HEIGHT, getHeight());
        }
        if (getExtendedState() != ICONIFIED) {
            slave.setProperty(SLAVE_SIZE_STATE, getExtendedState());
        }
    }//GEN-LAST:event_formComponentResized

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pCombatants;
    private javax.swing.JScrollPane spCombatants;
    private javax.swing.JTabbedPane tpSelection;
    // End of variables declaration//GEN-END:variables

    public void showCombatants(List<ICombatant> combatants, int activeIndex) {
        pCombatants.removeAll();
        ICharacter currentCharacter = null;
        List<ICombatant> ownedCombatants = new ArrayList<>();
        for (Component component : tpSelection.getComponents()) {
            if (component instanceof SlaveCharacterPanel) {
                if (tpSelection.getSelectedComponent().equals(component)) {
                    currentCharacter = ((SlaveCharacterPanel) tpSelection.getSelectedComponent()).getCharacter();
                }
                tpSelection.remove(component);
            }
        }
        log.debug("Removed all from view to leave a total of [{}] components in the view", pCombatants.getComponents().length);
        for (int i = activeIndex; i < combatants.size(); i++) {
            final ICombatant combatant = combatants.get(i);
            addCombatant(combatant);
            if (checkOwnCharacter(combatant)) {
                ownedCombatants.add(combatant);
            }
        }
        for (int i = 0; i < activeIndex; i++) {
            final ICombatant combatant = combatants.get(i);
            addCombatant(combatant);
            if (checkOwnCharacter(combatant)) {
                ownedCombatants.add(combatant);
            }
        }
        log.debug("Added all combatants to get a new total of [{}] components in the view", pCombatants.getComponents().length);
        if (pCombatants.getComponents().length == 0) {
            pCombatants.add(new JPanel());
        }
        Collections.sort(ownedCombatants);
        int selectedIndex = 0;
        for (ICombatant ownedCombatant : ownedCombatants) {
            selectedIndex = createCharacterPanel(ownedCombatant, currentCharacter, selectedIndex);
        }
        pCombatants.revalidate();
        tpSelection.revalidate();
        tpSelection.setSelectedIndex(selectedIndex);
    }

    private boolean checkOwnCharacter(ICombatant combatant) {
        IMasterConnectionInfo connectionInfo = slave.getConnectionInfo();
        return connectionInfo != null && combatant.ownedbyPlayer(connectionInfo.getPlayerName());
    }

    private int createCharacterPanel(ICombatant combatant, ICharacter currentCharacter, int currentIndex) {
        ICharacter character = combatant.getCharacter();
        final SlaveCharacterPanel panel = new SlaveCharacterPanel(character);
        tpSelection.addTab(character.getName(), panel);
        if (character.equals(currentCharacter)) {
            currentIndex = tpSelection.getComponentCount() - 1;
        }
        if (combatant.isTransformed()) {
            currentIndex = createCharacterPanel(combatant.getTransformation(), currentCharacter, currentIndex);
        }
        return currentIndex;
    }

    private void addCombatant(ICombatant combatant) {
        log.debug("Adding {} of class {}", combatant, combatant.getClass());
        pCombatants.add(new SlaveSubPanel(combatant));
    }

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b);
    }
}
