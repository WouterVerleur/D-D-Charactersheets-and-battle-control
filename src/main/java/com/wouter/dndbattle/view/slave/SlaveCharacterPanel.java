/*
 * Copyright (C) 2018 wverl
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.wouter.dndbattle.view.slave;

import com.wouter.dndbattle.objects.ICharacter;
import com.wouter.dndbattle.objects.IExtendedCharacter;
import com.wouter.dndbattle.objects.enums.AbilityType;
import com.wouter.dndbattle.objects.enums.SkillType;
import com.wouter.dndbattle.utils.GlobalUtils;
import com.wouter.dndbattle.utils.WeaponTablePanel;
import com.wouter.dndbattle.view.slave.character.SlaveAbilityPanel;
import com.wouter.dndbattle.view.slave.character.SlaveSavingThrowPanel;
import com.wouter.dndbattle.view.slave.character.SlaveSkillPanel;
import com.wouter.dndbattle.view.slave.character.SlaveSpellOverviewPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author wverl
 */
public class SlaveCharacterPanel extends WeaponTablePanel {

    private final ICharacter character;

    public SlaveCharacterPanel(ICharacter character) {
        this.character = character;
        initComponents();
        for (AbilityType type : AbilityType.values()) {
            pAbilities.add(new SlaveAbilityPanel(character, type));
            pSavingThrows.add(new SlaveSavingThrowPanel(character, type));
        }
        for (SkillType type : SkillType.values()) {
            pSkills.add(new SlaveSkillPanel(character, type));
        }
        DefaultTableModel model = (DefaultTableModel) tWeapons.getModel();
        character.getWeapons().forEach((weapon) -> {
            model.addRow(getWeaponRow(character, weapon));
        });
        if (!character.getSpells().isEmpty()) {
            tpTabs.addTab("Spells", new SlaveSpellOverviewPanel(character));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tpTabs = new javax.swing.JTabbedPane();
        pCharacter = new javax.swing.JPanel();
        pAbilities = new javax.swing.JPanel();
        pSavingThrows = new javax.swing.JPanel();
        pSkills = new javax.swing.JPanel();
        lPassiveWisdom = new javax.swing.JLabel();
        lInitiative = new javax.swing.JLabel();
        lArmorClass = new javax.swing.JLabel();
        spExtraInformation = new javax.swing.JScrollPane();
        taExtraInformation = new javax.swing.JTextArea();
        spWeapons = new javax.swing.JScrollPane();
        tWeapons = new javax.swing.JTable();

        pCharacter.setLayout(new java.awt.GridBagLayout());

        pAbilities.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Abilities", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));
        pAbilities.setMinimumSize(new java.awt.Dimension(10, 70));
        pAbilities.setPreferredSize(new java.awt.Dimension(10, 70));
        pAbilities.setLayout(new java.awt.GridLayout(0, 6));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        pCharacter.add(pAbilities, gridBagConstraints);

        pSavingThrows.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Saving Throws", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));
        pSavingThrows.setMinimumSize(new java.awt.Dimension(10, 70));
        pSavingThrows.setPreferredSize(new java.awt.Dimension(10, 70));
        pSavingThrows.setLayout(new java.awt.GridLayout(0, 6));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        pCharacter.add(pSavingThrows, gridBagConstraints);

        pSkills.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Skills", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));
        pSkills.setMinimumSize(new java.awt.Dimension(10, 210));
        pSkills.setPreferredSize(new java.awt.Dimension(10, 210));
        pSkills.setLayout(new java.awt.GridLayout(0, 6));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        pCharacter.add(pSkills, gridBagConstraints);

        lPassiveWisdom.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lPassiveWisdom.setText(Integer.toString(character.getPassiveWisdom()));
        lPassiveWisdom.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Passive Wisdom", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        pCharacter.add(lPassiveWisdom, gridBagConstraints);

        lInitiative.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lInitiative.setText(GlobalUtils.modifierToString(character.getInitiative()));
        lInitiative.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Initiative", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        pCharacter.add(lInitiative, gridBagConstraints);

        lArmorClass.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lArmorClass.setText(character.getArmorClassString());
        lArmorClass.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Armor Class", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        pCharacter.add(lArmorClass, gridBagConstraints);

        spExtraInformation.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Features & Traits"));

        taExtraInformation.setEditable(false);
        taExtraInformation.setBackground(GlobalUtils.getTransparentColor());
        taExtraInformation.setColumns(20);
        taExtraInformation.setLineWrap(true);
        taExtraInformation.setRows(5);
        taExtraInformation.setText(getExtraInformation());
        taExtraInformation.setWrapStyleWord(true);
        spExtraInformation.setViewportView(taExtraInformation);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pCharacter.add(spExtraInformation, gridBagConstraints);

        tpTabs.addTab("Character", pCharacter);

        tWeapons.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Attack Bonus", "Damage", "Notes"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spWeapons.setViewportView(tWeapons);

        tpTabs.addTab("Weapons", spWeapons);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @return the character
     */
    public ICharacter getCharacter() {
        return character;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lArmorClass;
    private javax.swing.JLabel lInitiative;
    private javax.swing.JLabel lPassiveWisdom;
    private javax.swing.JPanel pAbilities;
    private javax.swing.JPanel pCharacter;
    private javax.swing.JPanel pSavingThrows;
    private javax.swing.JPanel pSkills;
    private javax.swing.JScrollPane spExtraInformation;
    private javax.swing.JScrollPane spWeapons;
    private javax.swing.JTable tWeapons;
    private javax.swing.JTextArea taExtraInformation;
    private javax.swing.JTabbedPane tpTabs;
    // End of variables declaration//GEN-END:variables

    private String getExtraInformation() {
        return character instanceof IExtendedCharacter ? ((IExtendedCharacter) character).getFeaturesAndTraits() : "";
    }
}
