/*
 * Copyright (C) 2018 wverl
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.wouter.dndbattle.view.master.character.weapon;

import com.wouter.dndbattle.objects.enums.AbilityType;
import com.wouter.dndbattle.objects.enums.Dice;
import com.wouter.dndbattle.objects.enums.Proficiency;
import com.wouter.dndbattle.objects.impl.AbstractCharacter;
import com.wouter.dndbattle.objects.impl.Weapon;
import com.wouter.dndbattle.utils.Characters;
import com.wouter.dndbattle.utils.GlobalUtils;
import java.awt.event.ItemEvent;
import javax.swing.DefaultComboBoxModel;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author wverl
 */
public class WeaponFrame extends javax.swing.JFrame {

    private final Weapon weapon;
    private final AbstractCharacter character;
    private final boolean isNew;
    private final WeaponsPanel weaponsPanel;

    public WeaponFrame(Weapon weapon, AbstractCharacter character, boolean isNew, WeaponsPanel weaponsPanel) {
        this.weapon = weapon;
        this.character = character;
        this.isNew = isNew;
        this.weaponsPanel = weaponsPanel;
        initComponents();
        setLocationRelativeTo(weaponsPanel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lName = new javax.swing.JLabel();
        lDamage = new javax.swing.JLabel();
        lProficiency = new javax.swing.JLabel();
        lSettings = new javax.swing.JLabel();
        cbProficiency = new javax.swing.JComboBox<>();
        tfName = new javax.swing.JTextField();
        cbAttackDice = new javax.swing.JComboBox<>();
        sAmountOfAttackDice = new javax.swing.JSpinner();
        lDamageModifier = new javax.swing.JLabel();
        tfDamageType = new javax.swing.JTextField();
        cbFinesse = new javax.swing.JCheckBox();
        cbReach = new javax.swing.JCheckBox();
        bSave = new javax.swing.JButton();
        bCancel = new javax.swing.JButton();
        cbRanged = new javax.swing.JCheckBox();
        sRange = new javax.swing.JSpinner();
        lRangeSlash = new javax.swing.JLabel();
        sMaxRange = new javax.swing.JSpinner();
        tfNotes = new javax.swing.JTextField();
        cbLight = new javax.swing.JCheckBox();
        lAttackOverrade = new javax.swing.JLabel();
        tfAttackOverride = new javax.swing.JTextField();
        lDamageOverride = new javax.swing.JLabel();
        tfDamageOverride = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lName.setText("Name");

        lDamage.setText("Damage");

        lProficiency.setText("Proficiency");

        lSettings.setText("Settings");

        cbProficiency.setModel(new DefaultComboBoxModel(Proficiency.values()));
        cbProficiency.setSelectedItem(weapon.getProficiency());
        cbProficiency.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbProficiencyItemStateChanged(evt);
            }
        });

        tfName.setText(weapon.getName());

        cbAttackDice.setModel(new DefaultComboBoxModel(Dice.values()));
        cbAttackDice.setSelectedItem(weapon.getAttackDice());

        sAmountOfAttackDice.setModel(new javax.swing.SpinnerNumberModel(weapon.getAmountOfAttackDice(), 0, null, 1));

        lDamageModifier.setText(getWeaponModifier());

        tfDamageType.setText(weapon.getDamageType());

        cbFinesse.setSelected(weapon.isFinesse());
        cbFinesse.setText("Finesse");
        cbFinesse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFinesseActionPerformed(evt);
            }
        });

        cbReach.setText("Reach");

        bSave.setText("Save");
        bSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveActionPerformed(evt);
            }
        });

        bCancel.setText("Cancel");
        bCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelActionPerformed(evt);
            }
        });

        cbRanged.setText("Ranged");
        cbRanged.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRangedActionPerformed(evt);
            }
        });

        sRange.setModel(new javax.swing.SpinnerNumberModel(weapon.getRange(), 0, null, 1));
        sRange.setEnabled(weapon.isRanged());
        sRange.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sRangeStateChanged(evt);
            }
        });

        lRangeSlash.setText("/");

        sMaxRange.setModel(new javax.swing.SpinnerNumberModel(weapon.getMaxRange(), weapon.getRange(), null, 1));
        sMaxRange.setEnabled(weapon.isRanged());

        tfNotes.setText(weapon.getActualNotes());

        cbLight.setSelected(weapon.isLight());
        cbLight.setText("Light");

        lAttackOverrade.setText("Attack Override");

        tfAttackOverride.setText(weapon.getAttackOverride());

        lDamageOverride.setText("Damage Override");

        tfDamageOverride.setText(weapon.getDamageOverride());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(bCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bSave))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lDamageOverride, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lSettings, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lProficiency, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lDamage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lAttackOverrade, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbProficiency, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tfName)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sAmountOfAttackDice, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbAttackDice, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lDamageModifier)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfDamageType, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE))
                            .addComponent(tfNotes)
                            .addComponent(tfAttackOverride)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cbFinesse)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbLight)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbReach))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cbRanged)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(sRange, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lRangeSlash)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(sMaxRange, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(tfDamageOverride))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lName)
                    .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lDamage)
                    .addComponent(cbAttackDice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sAmountOfAttackDice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lDamageModifier)
                    .addComponent(tfDamageType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lProficiency)
                    .addComponent(cbProficiency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lSettings)
                    .addComponent(cbFinesse)
                    .addComponent(cbReach)
                    .addComponent(cbLight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbRanged)
                    .addComponent(sRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lRangeSlash)
                    .addComponent(sMaxRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfNotes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfAttackOverride, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lAttackOverrade))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lDamageOverride)
                    .addComponent(tfDamageOverride, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bSave)
                    .addComponent(bCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbFinesseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFinesseActionPerformed
        weapon.setFinesse(cbFinesse.isSelected());
        lDamageModifier.setText(getWeaponModifier());
    }//GEN-LAST:event_cbFinesseActionPerformed

    private void bSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveActionPerformed
        weapon.setName(tfName.getText());
        weapon.setAmountOfAttackDice((int) sAmountOfAttackDice.getValue());
        weapon.setAttackDice((Dice) cbAttackDice.getSelectedItem());
        weapon.setDamageType(tfDamageType.getText());
        weapon.setProficiency((Proficiency) cbProficiency.getSelectedItem());
        weapon.setFinesse(cbFinesse.isSelected());
        weapon.setLight(cbLight.isSelected());
        weapon.setReach(cbReach.isSelected());
        weapon.setRanged(cbRanged.isSelected());
        if (weapon.isRanged()) {
            weapon.setRange((int) sRange.getValue());
            weapon.setMaxRange((int) sMaxRange.getValue());
        } else {
            weapon.setRange(0);
            weapon.setMaxRange(0);
        }
        weapon.setActualNotes(tfNotes.getText());
        weapon.setDamageOverride(tfDamageOverride.getText());
        weapon.setAttackOverride(tfAttackOverride.getText());

        if (isNew) {
            character.addWeapon(weapon);
        }
        Characters.updateCharacter(character);
        weaponsPanel.updateAll();
        this.dispose();
    }//GEN-LAST:event_bSaveActionPerformed

    private void bCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_bCancelActionPerformed

    private void sRangeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sRangeStateChanged
        ((SpinnerNumberModel) sMaxRange.getModel()).setMinimum((int) sRange.getValue());
        if ((int) sMaxRange.getValue() < (int) sRange.getValue()) {
            sMaxRange.setValue(sRange.getValue());
        }
    }//GEN-LAST:event_sRangeStateChanged

    private void cbRangedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRangedActionPerformed
        sRange.setEnabled(cbRanged.isSelected());
        sMaxRange.setEnabled(cbRanged.isSelected());
    }//GEN-LAST:event_cbRangedActionPerformed

    private void cbProficiencyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbProficiencyItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            weapon.setProficiency((Proficiency) cbProficiency.getSelectedItem());
        }
    }//GEN-LAST:event_cbProficiencyItemStateChanged

    private String getWeaponModifier() {
        int modifier = character.getAbilityModifier(AbilityType.STR);
        if (weapon.isFinesse() && character.getAbilityModifier(AbilityType.DEX) > modifier) {
            modifier = character.getAbilityModifier(AbilityType.DEX);
        }
        return GlobalUtils.modifierToString(modifier);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCancel;
    private javax.swing.JButton bSave;
    private javax.swing.JComboBox<String> cbAttackDice;
    private javax.swing.JCheckBox cbFinesse;
    private javax.swing.JCheckBox cbLight;
    private javax.swing.JComboBox<String> cbProficiency;
    private javax.swing.JCheckBox cbRanged;
    private javax.swing.JCheckBox cbReach;
    private javax.swing.JLabel lAttackOverrade;
    private javax.swing.JLabel lDamage;
    private javax.swing.JLabel lDamageModifier;
    private javax.swing.JLabel lDamageOverride;
    private javax.swing.JLabel lName;
    private javax.swing.JLabel lProficiency;
    private javax.swing.JLabel lRangeSlash;
    private javax.swing.JLabel lSettings;
    private javax.swing.JSpinner sAmountOfAttackDice;
    private javax.swing.JSpinner sMaxRange;
    private javax.swing.JSpinner sRange;
    private javax.swing.JTextField tfAttackOverride;
    private javax.swing.JTextField tfDamageOverride;
    private javax.swing.JTextField tfDamageType;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfNotes;
    // End of variables declaration//GEN-END:variables
}
