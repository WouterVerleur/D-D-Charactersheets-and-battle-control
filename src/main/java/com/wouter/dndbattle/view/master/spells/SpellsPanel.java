/*
 * Copyright (C) 2018 Wouter
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.wouter.dndbattle.view.master.spells;

import java.awt.GridLayout;
import java.util.Collections;
import java.util.List;

import javax.swing.JOptionPane;

import com.wouter.dndbattle.objects.ISpell;
import com.wouter.dndbattle.objects.impl.Spell;
import com.wouter.dndbattle.utils.Settings;
import com.wouter.dndbattle.utils.Spells;
import com.wouter.dndbattle.view.IUpdateablePanel;

import static com.wouter.dndbattle.utils.Settings.SPELLS_GRID_COLUMNS;

/**
 *
 * @author Wouter
 */
public class SpellsPanel extends javax.swing.JPanel implements IUpdateablePanel {

    private static final int DEFAULT_COLUMNS = 4;

    private static final Settings SETTINGS = Settings.getInstance();
    private static final Spells spells = Spells.getInstance();

    public SpellsPanel() {
        initComponents();
        update();
    }

    @Override
    public final void update() {
        pSpells.removeAll();
        final List<ISpell> allSpells = spells.getAll();
        Collections.sort(allSpells, (ISpell spell_1, ISpell spell_2) -> spell_1.getName().compareToIgnoreCase(spell_2.getName()));
        allSpells.forEach((spell) -> {
            pSpells.add(new SpellPanel((Spell) spell, this));
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        sSpellColumns = new javax.swing.JSlider();
        bNew = new javax.swing.JButton();
        spSpells = new javax.swing.JScrollPane();
        pSpells = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        sSpellColumns.setMaximum(5);
        sSpellColumns.setMinimum(1);
        sSpellColumns.setMinorTickSpacing(1);
        sSpellColumns.setPaintTicks(true);
        sSpellColumns.setSnapToTicks(true);
        sSpellColumns.setValue(SETTINGS.getProperty(SPELLS_GRID_COLUMNS, DEFAULT_COLUMNS)
        );
        sSpellColumns.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sSpellColumnsStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(6, 10, 11, 0);
        add(sSpellColumns, gridBagConstraints);

        bNew.setText("New");
        bNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNewActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 11, 0);
        add(bNew, gridBagConstraints);

        spSpells.setBorder(null);

        pSpells.setLayout(new java.awt.GridLayout(0, sSpellColumns.getValue(), 5, 5));
        spSpells.setViewportView(pSpells);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(spSpells, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void bNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNewActionPerformed
        final Spell spell = new Spell();
        spell.setName(JOptionPane.showInputDialog(this, "Please enter a name for the new spell", "New spell", JOptionPane.QUESTION_MESSAGE));
        spells.add(spell);
        update();
    }//GEN-LAST:event_bNewActionPerformed

    private void sSpellColumnsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sSpellColumnsStateChanged
        ((GridLayout) pSpells.getLayout()).setColumns(sSpellColumns.getValue());
        pSpells.revalidate();
        SETTINGS.setProperty(SPELLS_GRID_COLUMNS, sSpellColumns.getValue());
    }//GEN-LAST:event_sSpellColumnsStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bNew;
    private javax.swing.JPanel pSpells;
    private javax.swing.JSlider sSpellColumns;
    private javax.swing.JScrollPane spSpells;
    // End of variables declaration//GEN-END:variables

    public void removeSpell(Spell spell) {
        spells.remove(spell);
        update();
    }

    void saveSpell(Spell spell) {
        spells.update(spell);
    }
}
