/*
 * Copyright (C) 2018 Wouter
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.dndbattle.view.master.spells;

import static org.dndbattle.utils.Settings.SPELLS_GRID_COLUMNS;

import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridLayout;
import java.awt.Insets;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;

import org.dndbattle.objects.ISpell;
import org.dndbattle.objects.impl.Spell;
import org.dndbattle.utils.Settings;
import org.dndbattle.utils.Spells;
import org.dndbattle.view.IUpdateablePanel;

/**
 *
 * @author Wouter
 */
public class SpellsPanel extends javax.swing.JPanel implements IUpdateablePanel {

    private static final int DEFAULT_COLUMNS = 5;
    private static final Settings SETTINGS = Settings.getInstance();
    private static final Spells SPELLS = Spells.getInstance();
    private static final Border LINE_BORDER = new EtchedBorder();

    private final Map<Character, JPanel> panelMap = new HashMap<>();
    private final GridLayout spellGridLayout = new GridLayout(0, SETTINGS.getProperty(SPELLS_GRID_COLUMNS, DEFAULT_COLUMNS), 5, 5);

    public SpellsPanel() {
        initComponents();
        update();
    }

    @Override
    public final void update() {
        pSpells.removeAll();
        final List<ISpell> allSpells = SPELLS.getAll();
        Collections.sort(allSpells, (ISpell spell_1, ISpell spell_2) -> spell_1.getName().compareToIgnoreCase(spell_2.getName()));

        GridBagConstraints constraints = new GridBagConstraints();
        constraints.fill = GridBagConstraints.BOTH;
        constraints.weightx = 1;
        constraints.gridy = 0;
        constraints.gridx = 0;
        constraints.insets = new Insets(5, 5, 0, 5);

        Character currentChar = null;
        JPanel currentPanel = null;
        for (ISpell spell : allSpells) {
            if (currentChar == null || spell.getName().charAt(0) != currentChar) {
                currentChar = spell.getName().charAt(0);
                currentPanel = new JPanel(spellGridLayout);
                currentPanel.setBorder(LINE_BORDER);
                panelMap.put(currentChar, currentPanel);
                currentPanel.add(new CharacterLabel(currentChar));
                pSpells.add(currentPanel, constraints);
                constraints.gridy++;
            }
            currentPanel.add(new SpellPanel((Spell) spell, this));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        sSpellColumns = new javax.swing.JSlider();
        bNew = new javax.swing.JButton();
        spSpells = new javax.swing.JScrollPane();
        pSpells = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        sSpellColumns.setMaximum(10);
        sSpellColumns.setMinimum(1);
        sSpellColumns.setMinorTickSpacing(1);
        sSpellColumns.setPaintTicks(true);
        sSpellColumns.setSnapToTicks(true);
        sSpellColumns.setValue(SETTINGS.getProperty(SPELLS_GRID_COLUMNS, DEFAULT_COLUMNS));
        sSpellColumns.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sSpellColumnsStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(6, 10, 11, 0);
        add(sSpellColumns, gridBagConstraints);

        bNew.setText("New");
        bNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNewActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 11, 0);
        add(bNew, gridBagConstraints);

        spSpells.setBorder(null);

        pSpells.setLayout(new java.awt.GridBagLayout());
        spSpells.setViewportView(pSpells);

        spSpells.getVerticalScrollBar().setUnitIncrement(20);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(spSpells, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void bNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNewActionPerformed
        String name = JOptionPane.showInputDialog(this, "Please enter the name of the new spell", "New spell", JOptionPane.QUESTION_MESSAGE);
        if (name == null || name.isEmpty()) {
            return;
        }
        final Spell spell = new Spell();
        spell.setName(name);
        SPELLS.add(spell);
        update();
    }//GEN-LAST:event_bNewActionPerformed

    private void sSpellColumnsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sSpellColumnsStateChanged
        spellGridLayout.setColumns(sSpellColumns.getValue());
        panelMap.values().forEach((panel) -> {
            panel.revalidate();
        });
        SETTINGS.setProperty(SPELLS_GRID_COLUMNS, sSpellColumns.getValue());
    }//GEN-LAST:event_sSpellColumnsStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bNew;
    private javax.swing.JPanel pSpells;
    private javax.swing.JSlider sSpellColumns;
    private javax.swing.JScrollPane spSpells;
    // End of variables declaration//GEN-END:variables

    public void removeSpell(Spell spell) {
        SPELLS.remove(spell);
        update();
    }

    void saveSpell(Spell spell) {
        SPELLS.update(spell);
    }

    private static class CharacterLabel extends JLabel {

        public CharacterLabel(Character currentChar) {
            super(currentChar.toString());
            Font oldFont = getFont();
            setFont(new Font(oldFont.getName(), oldFont.getStyle(), 100));
            setHorizontalAlignment(CENTER);
            setVerticalAlignment(CENTER);
        }
    }
}
