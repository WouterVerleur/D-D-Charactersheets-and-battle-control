/*
 * Copyright (C) 2018 wverl
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.wouter.dndbattle.view.master.encounter;

import com.wouter.dndbattle.objects.ICharacter;
import com.wouter.dndbattle.objects.IExtendedCharacter;
import com.wouter.dndbattle.objects.enums.ChallengeRating;

/**
 *
 * @author wverl
 */
public class EncounterCombantantPanel extends javax.swing.JPanel {

    private final EncounterCalculator calculator;
    private final ICharacter character;

    public EncounterCombantantPanel(final EncounterCalculator calculator, final ICharacter character) {
        this.calculator = calculator;
        this.character = character;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lName = new javax.swing.JLabel();
        sAmount = new javax.swing.JSpinner();
        lDescription = new javax.swing.JLabel();

        lName.setText(character.getName());

        sAmount.setModel(new javax.swing.SpinnerNumberModel(1, 0, null, 1));
        sAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sAmountStateChanged(evt);
            }
        });

        lDescription.setText(character.getDescription());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sAmount, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lName)
                    .addComponent(sAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lDescription)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sAmountStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sAmountStateChanged
        calculator.updateLabels();
    }//GEN-LAST:event_sAmountStateChanged

    public int getLevel() {
        if (character instanceof IExtendedCharacter) {
            return ((IExtendedCharacter) character).getTotalLevel();
        }
        return character.getChallengeRating().getLevel();
    }

    public int getExp() {
        ChallengeRating cr = character.getChallengeRating();
        if (cr == null) {
            cr = ChallengeRating.getForLevel(getLevel());
        }
        return cr.getExp();
    }

    public int getAmount() {
        return (int) sAmount.getValue();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lDescription;
    private javax.swing.JLabel lName;
    private javax.swing.JSpinner sAmount;
    // End of variables declaration//GEN-END:variables

    public void addOne() {
        sAmount.setValue((int) sAmount.getValue() + 1);
    }
}
