/*
 * Copyright (C) 2018 Wouter
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.dndbattle.view.host.character.abiliyAndSkill;

import static java.awt.event.ItemEvent.SELECTED;

import java.awt.Component;
import java.util.List;

import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;

import org.dndbattle.objects.IArmor;
import org.dndbattle.objects.enums.AbilityType;
import org.dndbattle.objects.enums.SkillType;
import org.dndbattle.objects.impl.AbstractCharacter;
import org.dndbattle.objects.impl.AbstractExtendedCharacter;
import org.dndbattle.objects.impl.character.Ooze;
import org.dndbattle.utils.Armors;
import org.dndbattle.utils.Characters;
import org.dndbattle.utils.GlobalUtils;
import org.dndbattle.view.IUpdateablePanel;
import org.dndbattle.view.host.character.CharacterPanel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Wouter
 */
public class AbilityAndSkillPanel extends javax.swing.JPanel implements IUpdateablePanel {

    private static final Logger log = LoggerFactory.getLogger(AbilityAndSkillPanel.class);
    private static final Characters CHARACTERS = Characters.getInstance();

    private final AbstractCharacter character;
    private final CharacterPanel characterPanel;

    public AbilityAndSkillPanel(AbstractCharacter character, CharacterPanel characterPanel) {
        this.character = character;
        this.characterPanel = characterPanel;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pAbility = new javax.swing.JPanel();
        pSavingThrow = new javax.swing.JPanel();
        pSkill = new javax.swing.JPanel();
        pHealth = new javax.swing.JPanel();
        sHealth = new javax.swing.JSpinner();
        pPassiveWisdom = new javax.swing.JPanel();
        lPassiveWisdomModifier = new javax.swing.JLabel();
        pInitiative = new javax.swing.JPanel();
        lInitativeDex = new javax.swing.JLabel();
        lInitiativeAdd = new javax.swing.JLabel();
        sInitiativeBonus = new javax.swing.JSpinner();
        lInitiativeEquals = new javax.swing.JLabel();
        lInitiative = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        pProficiency = new javax.swing.JPanel();
        lProficiency = new javax.swing.JLabel();
        cbJackOfAllTrades = new javax.swing.JCheckBox();
        pArmorClass = new javax.swing.JPanel();
        lArmor = new javax.swing.JLabel();
        cbArmor = new javax.swing.JComboBox<>();
        lOverride = new javax.swing.JLabel();
        sOverride = new javax.swing.JSpinner();
        lExtraArmor = new javax.swing.JLabel();
        sExtraArmor = new javax.swing.JSpinner();
        cbShield = new javax.swing.JCheckBox();
        lArmorClass = new javax.swing.JLabel();
        sShieldBonus = new javax.swing.JSpinner();
        pChallengeRating = new javax.swing.JPanel();
        cbChallengeRating = new org.dndbattle.view.comboboxes.ChallengeRatingComboBox();
        pSize = new javax.swing.JPanel();
        cbSize = new org.dndbattle.view.comboboxes.SizeComboBox();
        cbSplit = new javax.swing.JCheckBox();
        cbSplitSize = new org.dndbattle.view.comboboxes.SizeComboBox();
        pSpeed = new javax.swing.JPanel();
        sSpeed = new javax.swing.JSpinner();
        pHitDice = new javax.swing.JPanel();
        lHitDice = new javax.swing.JLabel();
        pTransform = new javax.swing.JPanel();
        cbCanTransform = new javax.swing.JCheckBox();
        cbTransformClass = new org.dndbattle.view.comboboxes.ClassComboBox();
        cbTransformChallengeRating = new org.dndbattle.view.comboboxes.ChallengeRatingComboBox();
        spNotes = new javax.swing.JScrollPane();
        taNotes = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());

        pAbility.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pAbility.setLayout(new java.awt.GridLayout(0, 1));

        for (AbilityType abilityType : AbilityType.values()){
            pAbility.add(new AbilityPanel(character, abilityType, this));
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 75;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(pAbility, gridBagConstraints);

        pSavingThrow.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pSavingThrow.setLayout(new java.awt.GridLayout(0, 1));

        for (AbilityType abilityType : AbilityType.values()){
            pSavingThrow.add(new SavingThrowPanel(character, abilityType, this));
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 125;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        add(pSavingThrow, gridBagConstraints);

        pSkill.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pSkill.setLayout(new java.awt.GridLayout(0, 1));

        for (SkillType skillType : SkillType.values()){
            pSkill.add(new SkillPanel(character, skillType, this));
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 175;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        add(pSkill, gridBagConstraints);

        pHealth.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Health", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        sHealth.setModel(new javax.swing.SpinnerNumberModel(character.getMaxHealth(), 1, null, 1));
        sHealth.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sHealthStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pHealthLayout = new javax.swing.GroupLayout(pHealth);
        pHealth.setLayout(pHealthLayout);
        pHealthLayout.setHorizontalGroup(
            pHealthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sHealth, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
        );
        pHealthLayout.setVerticalGroup(
            pHealthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sHealth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        add(pHealth, gridBagConstraints);

        pPassiveWisdom.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Passive Wisdom", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        pPassiveWisdom.setMinimumSize(new java.awt.Dimension(100, 40));
        pPassiveWisdom.setPreferredSize(new java.awt.Dimension(100, 40));

        lPassiveWisdomModifier.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lPassiveWisdomModifier.setText(Integer.toString(character.getPassiveWisdom()));

        javax.swing.GroupLayout pPassiveWisdomLayout = new javax.swing.GroupLayout(pPassiveWisdom);
        pPassiveWisdom.setLayout(pPassiveWisdomLayout);
        pPassiveWisdomLayout.setHorizontalGroup(
            pPassiveWisdomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lPassiveWisdomModifier, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
        );
        pPassiveWisdomLayout.setVerticalGroup(
            pPassiveWisdomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pPassiveWisdomLayout.createSequentialGroup()
                .addComponent(lPassiveWisdomModifier)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        add(pPassiveWisdom, gridBagConstraints);

        pInitiative.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Initiative", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        pInitiative.setMinimumSize(new java.awt.Dimension(100, 40));

        lInitativeDex.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lInitativeDex.setText(GlobalUtils.modifierToString(character.getAbilityModifier(AbilityType.DEX)));

        lInitiativeAdd.setText("+"); // NOI18N

        sInitiativeBonus.setModel(new javax.swing.SpinnerNumberModel());
        sInitiativeBonus.setValue(character.getInitiativeBonus());
        sInitiativeBonus.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sInitiativeBonusStateChanged(evt);
            }
        });

        lInitiativeEquals.setText("=");

        lInitiative.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lInitiative.setText(GlobalUtils.modifierToString(character.getInitiative()));

        jLabel1.setText(character.isJackOfAllTrades() ? "+" + Math.floorDiv(character.getProficiencyScore(), 2) : "");

        javax.swing.GroupLayout pInitiativeLayout = new javax.swing.GroupLayout(pInitiative);
        pInitiative.setLayout(pInitiativeLayout);
        pInitiativeLayout.setHorizontalGroup(
            pInitiativeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pInitiativeLayout.createSequentialGroup()
                .addComponent(lInitativeDex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lInitiativeAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sInitiativeBonus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lInitiativeEquals, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lInitiative, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pInitiativeLayout.setVerticalGroup(
            pInitiativeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pInitiativeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lInitativeDex)
                .addComponent(sInitiativeBonus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lInitiativeAdd)
                .addComponent(lInitiativeEquals)
                .addComponent(lInitiative)
                .addComponent(jLabel1))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        add(pInitiative, gridBagConstraints);

        pProficiency.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Proficiency", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        lProficiency.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lProficiency.setText(GlobalUtils.modifierToString(character.getProficiencyScore()));

        cbJackOfAllTrades.setSelected(character.isJackOfAllTrades());
        cbJackOfAllTrades.setText("Jack of all Trades (" + GlobalUtils.modifierToString(Math.floorDiv(character.getProficiencyScore(), 2)) + ')');
    cbJackOfAllTrades.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    cbJackOfAllTrades.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cbJackOfAllTradesActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout pProficiencyLayout = new javax.swing.GroupLayout(pProficiency);
    pProficiency.setLayout(pProficiencyLayout);
    pProficiencyLayout.setHorizontalGroup(
        pProficiencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(lProficiency, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(cbJackOfAllTrades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    pProficiencyLayout.setVerticalGroup(
        pProficiencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pProficiencyLayout.createSequentialGroup()
            .addComponent(lProficiency)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(cbJackOfAllTrades))
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
    add(pProficiency, gridBagConstraints);

    pArmorClass.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Armor Class", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
    pArmorClass.setLayout(new java.awt.GridBagLayout());

    lArmor.setText("Armor");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
    pArmorClass.add(lArmor, gridBagConstraints);

    cbArmor.setModel(getArmorCbModel());
    cbArmor.setSelectedItem(character.getArmor());
    cbArmor.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            cbArmorItemStateChanged(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
    pArmorClass.add(cbArmor, gridBagConstraints);

    lOverride.setText("Override");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
    pArmorClass.add(lOverride, gridBagConstraints);

    sOverride.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
    sOverride.setValue(character.getArmorOverride());
    sOverride.addChangeListener(new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            sOverrideStateChanged(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
    pArmorClass.add(sOverride, gridBagConstraints);

    lExtraArmor.setText("Extra armor");
    lExtraArmor.setToolTipText("Extra armor from features and traits");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
    pArmorClass.add(lExtraArmor, gridBagConstraints);

    sExtraArmor.setModel(new javax.swing.SpinnerNumberModel());
    sExtraArmor.setValue(character.getConditionalArmorBonus());
    sExtraArmor.addChangeListener(new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            sExtraArmorStateChanged(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
    pArmorClass.add(sExtraArmor, gridBagConstraints);

    cbShield.setSelected(character.isShieldWearer());
    cbShield.setText("Has a shield");
    cbShield.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            cbShieldItemStateChanged(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
    pArmorClass.add(cbShield, gridBagConstraints);

    lArmorClass.setText(character.getArmorClassString());
    lArmorClass.setVerticalAlignment(javax.swing.SwingConstants.TOP);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    pArmorClass.add(lArmorClass, gridBagConstraints);

    sShieldBonus.setModel(new javax.swing.SpinnerNumberModel(2, null, null, 1));
    sShieldBonus.setEnabled(character.isShieldWearer());
    sShieldBonus.addChangeListener(new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            sShieldBonusStateChanged(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
    pArmorClass.add(sShieldBonus, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
    add(pArmorClass, gridBagConstraints);

    pChallengeRating.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Challenge Rating", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
    pChallengeRating.setEnabled(character.hasChallengeRating());

    cbChallengeRating.setSelectedItem(character.getChallengeRating());
    cbChallengeRating.setEnabled(character.hasChallengeRating());
    cbChallengeRating.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            cbChallengeRatingItemStateChanged(evt);
        }
    });

    javax.swing.GroupLayout pChallengeRatingLayout = new javax.swing.GroupLayout(pChallengeRating);
    pChallengeRating.setLayout(pChallengeRatingLayout);
    pChallengeRatingLayout.setHorizontalGroup(
        pChallengeRatingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(cbChallengeRating, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
    );
    pChallengeRatingLayout.setVerticalGroup(
        pChallengeRatingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pChallengeRatingLayout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(cbChallengeRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
    add(pChallengeRating, gridBagConstraints);

    pSize.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Size", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
    pSize.setEnabled(character.hasChallengeRating());

    cbSize.setSelectedItem(character.getSize());
    cbSize.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            cbSizeItemStateChanged(evt);
        }
    });

    cbSplit.setSelected(character instanceof Ooze && ((Ooze) character).isCanSplit());
    cbSplit.setText("Can split when at least:");
    cbSplit.setEnabled(character instanceof Ooze);
    cbSplit.addChangeListener(new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            cbSplitStateChanged(evt);
        }
    });

    cbSplitSize.setEditable(character instanceof Ooze && ((Ooze)character).isCanSplit());
    cbSplitSize.setSelectedItem(character instanceof Ooze?((Ooze) character).getLowestSplitSize():null);

    javax.swing.GroupLayout pSizeLayout = new javax.swing.GroupLayout(pSize);
    pSize.setLayout(pSizeLayout);
    pSizeLayout.setHorizontalGroup(
        pSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(cbSize, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
        .addComponent(cbSplit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(cbSplitSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    pSizeLayout.setVerticalGroup(
        pSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pSizeLayout.createSequentialGroup()
            .addComponent(cbSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(cbSplit)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(cbSplitSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
    add(pSize, gridBagConstraints);

    pSpeed.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Speed", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
    pSpeed.setEnabled(character.hasChallengeRating());

    sSpeed.setModel(new javax.swing.SpinnerNumberModel(30, 5, null, 5));
    sSpeed.setValue(character.getSpeed());
    sSpeed.addChangeListener(new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            sSpeedStateChanged(evt);
        }
    });

    javax.swing.GroupLayout pSpeedLayout = new javax.swing.GroupLayout(pSpeed);
    pSpeed.setLayout(pSpeedLayout);
    pSpeedLayout.setHorizontalGroup(
        pSpeedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(sSpeed, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
    );
    pSpeedLayout.setVerticalGroup(
        pSpeedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(sSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 9;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
    add(pSpeed, gridBagConstraints);

    pHitDice.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Hit dice", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

    lHitDice.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lHitDice.setText(getHitDiceText());

    javax.swing.GroupLayout pHitDiceLayout = new javax.swing.GroupLayout(pHitDice);
    pHitDice.setLayout(pHitDiceLayout);
    pHitDiceLayout.setHorizontalGroup(
        pHitDiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(lHitDice, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
    );
    pHitDiceLayout.setVerticalGroup(
        pHitDiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(lHitDice)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
    add(pHitDice, gridBagConstraints);

    pTransform.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Transformation", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
    pTransform.setEnabled(character.hasChallengeRating());

    cbCanTransform.setSelected(character.isCanTransform());
    cbCanTransform.setText("Can transform");
    cbCanTransform.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    cbCanTransform.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cbCanTransformActionPerformed(evt);
        }
    });

    cbTransformClass.setSelectedItem(character.getTransformType());
    cbTransformClass.setEnabled(character.isCanTransform());
    cbTransformClass.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            cbTransformClassItemStateChanged(evt);
        }
    });

    cbTransformChallengeRating.setSelectedItem(character.getTransformChallengeRating());
    cbTransformChallengeRating.setEnabled(character.isCanTransform());
    cbTransformChallengeRating.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            cbTransformChallengeRatingItemStateChanged(evt);
        }
    });

    javax.swing.GroupLayout pTransformLayout = new javax.swing.GroupLayout(pTransform);
    pTransform.setLayout(pTransformLayout);
    pTransformLayout.setHorizontalGroup(
        pTransformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(cbCanTransform, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
        .addComponent(cbTransformClass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(cbTransformChallengeRating, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    pTransformLayout.setVerticalGroup(
        pTransformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pTransformLayout.createSequentialGroup()
            .addComponent(cbCanTransform)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(cbTransformClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(cbTransformChallengeRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
    add(pTransform, gridBagConstraints);

    taNotes.setColumns(20);
    taNotes.setLineWrap(true);
    taNotes.setTabSize(4);
    taNotes.setText(character.getNotes());
    taNotes.setWrapStyleWord(true);
    taNotes.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            taNotesFocusLost(evt);
        }
    });
    spNotes.setViewportView(taNotes);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 10;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 100;
    gridBagConstraints.ipady = 50;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
    add(spNotes, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void sHealthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sHealthStateChanged
        character.setMaxHealth((int) sHealth.getValue());
        CHARACTERS.update(character);
        updatePanels();
    }//GEN-LAST:event_sHealthStateChanged

    private void cbChallengeRatingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbChallengeRatingItemStateChanged
        if (evt.getStateChange() == SELECTED) {
            character.setChallengeRating(cbChallengeRating.getSelectedItem());
            CHARACTERS.update(character);
            updatePanels();
        }
    }//GEN-LAST:event_cbChallengeRatingItemStateChanged

    private void cbCanTransformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCanTransformActionPerformed
        boolean canTransform = cbCanTransform.isSelected();
        character.setCanTransform(canTransform);
        cbTransformChallengeRating.setEnabled(canTransform);
        cbTransformClass.setEnabled(canTransform);
        CHARACTERS.update(character);
    }//GEN-LAST:event_cbCanTransformActionPerformed

    private void cbTransformClassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbTransformClassItemStateChanged
        if (evt.getStateChange() == SELECTED) {
            character.setTransformType(cbTransformClass.getSelectedItem());
            CHARACTERS.update(character);
        }
    }//GEN-LAST:event_cbTransformClassItemStateChanged

    private void cbTransformChallengeRatingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbTransformChallengeRatingItemStateChanged
        if (evt.getStateChange() == SELECTED) {
            character.setTransformChallengeRating(cbTransformChallengeRating.getSelectedItem());
            CHARACTERS.update(character);
        }
    }//GEN-LAST:event_cbTransformChallengeRatingItemStateChanged

    private void taNotesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_taNotesFocusLost
        character.setNotes(taNotes.getText());
        CHARACTERS.update(character);
    }//GEN-LAST:event_taNotesFocusLost

    private void cbArmorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbArmorItemStateChanged
        character.setArmor((IArmor) cbArmor.getSelectedItem());
        CHARACTERS.update(character);
        lArmorClass.setText(character.getArmorClassString());
    }//GEN-LAST:event_cbArmorItemStateChanged

    private void cbShieldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbShieldItemStateChanged
        boolean shield = cbShield.isSelected();
        character.setUsingShield(shield);
        sShieldBonus.setEnabled(shield);
        CHARACTERS.update(character);
        lArmorClass.setText(character.getArmorClassString());
    }//GEN-LAST:event_cbShieldItemStateChanged

    private void sOverrideStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sOverrideStateChanged
        character.setArmorOverride((Integer) sOverride.getValue());
        CHARACTERS.update(character);
        lArmorClass.setText(character.getArmorClassString());
    }//GEN-LAST:event_sOverrideStateChanged

    private void sExtraArmorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sExtraArmorStateChanged
        character.setConditionalArmorBonus((Integer) sExtraArmor.getValue());
        CHARACTERS.update(character);
        lArmorClass.setText(character.getArmorClassString());
    }//GEN-LAST:event_sExtraArmorStateChanged

    private void sShieldBonusStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sShieldBonusStateChanged
        character.setShieldBonus((Integer) sShieldBonus.getValue());
        lArmorClass.setText(character.getArmorClassString());
        CHARACTERS.update(character);
    }//GEN-LAST:event_sShieldBonusStateChanged

    private void cbSizeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbSizeItemStateChanged
        character.setSize(cbSize.getSelectedItem());
        CHARACTERS.update(character);
    }//GEN-LAST:event_cbSizeItemStateChanged

    private void sSpeedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sSpeedStateChanged
        character.setSpeed((int) sSpeed.getValue());
        CHARACTERS.update(character);
    }//GEN-LAST:event_sSpeedStateChanged

    private void sInitiativeBonusStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sInitiativeBonusStateChanged
        character.setInitiativeBonus((int) sInitiativeBonus.getValue());
        lInitiative.setText(GlobalUtils.modifierToString(character.getInitiative()));
        CHARACTERS.update(character);
    }//GEN-LAST:event_sInitiativeBonusStateChanged

    private void cbJackOfAllTradesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbJackOfAllTradesActionPerformed
        character.setJackOfAllTrades(cbJackOfAllTrades.isSelected());
        CHARACTERS.update(character);
        update();
    }//GEN-LAST:event_cbJackOfAllTradesActionPerformed

    private void cbSplitStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cbSplitStateChanged
        if (character instanceof Ooze) {
            ((Ooze) character).setCanSplit(cbSplit.isSelected());
            cbSplitSize.setEnabled(cbSplit.isSelected());
            CHARACTERS.update(character);
        }
    }//GEN-LAST:event_cbSplitStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<IArmor> cbArmor;
    private javax.swing.JCheckBox cbCanTransform;
    private org.dndbattle.view.comboboxes.ChallengeRatingComboBox cbChallengeRating;
    private javax.swing.JCheckBox cbJackOfAllTrades;
    private javax.swing.JCheckBox cbShield;
    private org.dndbattle.view.comboboxes.SizeComboBox cbSize;
    private javax.swing.JCheckBox cbSplit;
    private org.dndbattle.view.comboboxes.SizeComboBox cbSplitSize;
    private org.dndbattle.view.comboboxes.ChallengeRatingComboBox cbTransformChallengeRating;
    private org.dndbattle.view.comboboxes.ClassComboBox cbTransformClass;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lArmor;
    private javax.swing.JLabel lArmorClass;
    private javax.swing.JLabel lExtraArmor;
    private javax.swing.JLabel lHitDice;
    private javax.swing.JLabel lInitativeDex;
    private javax.swing.JLabel lInitiative;
    private javax.swing.JLabel lInitiativeAdd;
    private javax.swing.JLabel lInitiativeEquals;
    private javax.swing.JLabel lOverride;
    private javax.swing.JLabel lPassiveWisdomModifier;
    private javax.swing.JLabel lProficiency;
    private javax.swing.JPanel pAbility;
    private javax.swing.JPanel pArmorClass;
    private javax.swing.JPanel pChallengeRating;
    private javax.swing.JPanel pHealth;
    private javax.swing.JPanel pHitDice;
    private javax.swing.JPanel pInitiative;
    private javax.swing.JPanel pPassiveWisdom;
    private javax.swing.JPanel pProficiency;
    private javax.swing.JPanel pSavingThrow;
    private javax.swing.JPanel pSize;
    private javax.swing.JPanel pSkill;
    private javax.swing.JPanel pSpeed;
    private javax.swing.JPanel pTransform;
    private javax.swing.JSpinner sExtraArmor;
    private javax.swing.JSpinner sHealth;
    private javax.swing.JSpinner sInitiativeBonus;
    private javax.swing.JSpinner sOverride;
    private javax.swing.JSpinner sShieldBonus;
    private javax.swing.JSpinner sSpeed;
    private javax.swing.JScrollPane spNotes;
    private javax.swing.JTextArea taNotes;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update() {
        lPassiveWisdomModifier.setText(Integer.toString(character.getPassiveWisdom()));
        lInitativeDex.setText(GlobalUtils.modifierToString(character.getAbilityModifier(AbilityType.DEX)));
        lInitiative.setText(GlobalUtils.modifierToString(character.getInitiative()));
        lArmorClass.setText(character.getArmorClassString());
        lProficiency.setText(GlobalUtils.modifierToString(character.getProficiencyScore()));
        lHitDice.setText(getHitDiceText());
        updatePanels(pAbility);
        updatePanels(pSavingThrow);
        updatePanels(pSkill);
    }

    private String getHitDiceText() {
        if (character instanceof AbstractExtendedCharacter) {
            return ((AbstractExtendedCharacter) character).getHitDice();
        }
        return " ";
    }

    public void updatePanels() {
        characterPanel.updateAll();
    }

    private void updatePanels(JPanel panel) {
        for (Component component : panel.getComponents()) {
            log.debug("Attempting update of [{}]", component);
            if (component instanceof IUpdateablePanel) {
                ((IUpdateablePanel) component).update();
            }
        }
    }

    private ComboBoxModel<IArmor> getArmorCbModel() {
        List<IArmor> armors = Armors.getInstance().getAll();
        IArmor[] armorArray = new IArmor[armors.size()];
        armors.toArray(armorArray);
        return new DefaultComboBoxModel<>(armorArray);
    }
}
