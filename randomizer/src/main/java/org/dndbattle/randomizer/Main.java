/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.dndbattle.randomizer;

import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.dndbattle.randomizer.randomizers.Randomizer;
import org.dndbattle.randomizer.randomizers.TimedRandomizer;
import org.dndbattle.randomizer.utils.Settings;
import org.dndbattle.randomizer.view.AbstractRandomizerPanel;
import org.dndbattle.randomizer.view.EditRandomizerPanel;
import org.dndbattle.randomizer.view.TimedRandomizerPanel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author wverl
 */
public class Main extends javax.swing.JFrame {

  private static final Settings SETTINGS = Settings.getInstance();
  private static final Logger log = LoggerFactory.getLogger(Main.class);

  private static final TypeReference<Randomizer> TR_RANDOMIZER = new TypeReference<Randomizer>() {
  };
  private static final TypeReference<List<Randomizer>> TR_RANDOMIZER_LIST = new TypeReference<List<Randomizer>>() {
  };

  private final ObjectMapper mapper = new ObjectMapper();

  static {
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException e) {
      log.error("Unable to set look and feel to Nimbus", e);
    }
  }

  private static final Main INSTANCE = new Main();

  private static final String MAIN_WIDTH_SETTING = "gui.main.width";
  private static final String MAIN_HEIGHT_SETTING = "gui.main.height";
  private static final String MAIN_X_SETTING = "gui.main.x";
  private static final String MAIN_Y_SETTING = "gui.main.y";
  private static final String MAIN_STATE_SETTING = "gui.main.state";
  private static final String MAIN_DIVIDER_SETTING = "gui.main.divider";

  private static final String ONETIME = "One-time";
  private static final String TIMED = "Recurring";
  private static final String STORAGE_FILE = "randomizers.save";

  private Main() {
    initComponents();
    setSize(SETTINGS.getProperty(MAIN_WIDTH_SETTING, getPreferredSize().width), SETTINGS.getProperty(MAIN_HEIGHT_SETTING, getPreferredSize().height));
    setExtendedState(SETTINGS.getProperty(MAIN_STATE_SETTING, NORMAL));
    setLocation(SETTINGS.getProperty(MAIN_X_SETTING, 0), SETTINGS.getProperty(MAIN_Y_SETTING, 0));
    loadRandomizers();
  }

  private void loadRandomizers() {
    File storageFile = SETTINGS.getInternalFile(STORAGE_FILE);
    try {
      List<Randomizer> list = mapper.readValue(storageFile, TR_RANDOMIZER_LIST);
      list.forEach((randomizer) -> {
        pLeft.add(randomizer.getPanel());
      });
    } catch (IOException e) {
      log.error("Unable to read old randomizers", e);
      System.exit(1);
    }
    pLeft.revalidate();
  }

  @Override
  public void setVisible(boolean bln) {
    super.setVisible(bln);
  }

  private void addRandomizer(Randomizer randomizer) {
    pLeft.add(randomizer.getPanel());
    pLeft.revalidate();
    changeRight(randomizer);
  }

  public void changeRight(Randomizer randomizer) {
    setRight(new EditRandomizerPanel(randomizer));
  }

  private void setRight(JPanel editRandomizerPanel) {
    spRight.setViewportView(editRandomizerPanel);
    bExport.setEnabled(editRandomizerPanel instanceof EditRandomizerPanel);
    bDelete.setEnabled(editRandomizerPanel instanceof EditRandomizerPanel);
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    spMain = new javax.swing.JSplitPane();
    spLeft = new javax.swing.JScrollPane();
    pLeft = new javax.swing.JPanel();
    spRight = new javax.swing.JScrollPane();
    bStopAll = new javax.swing.JButton();
    bStartAll = new javax.swing.JButton();
    bNew = new javax.swing.JButton();
    bExport = new javax.swing.JButton();
    bLoad = new javax.swing.JButton();
    bDelete = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setSize(getPreferredSize());
    addComponentListener(new java.awt.event.ComponentAdapter() {
      public void componentMoved(java.awt.event.ComponentEvent evt) {
        formComponentMoved(evt);
      }
      public void componentResized(java.awt.event.ComponentEvent evt) {
        formComponentResized(evt);
      }
    });
    addWindowStateListener(new java.awt.event.WindowStateListener() {
      public void windowStateChanged(java.awt.event.WindowEvent evt) {
        formWindowStateChanged(evt);
      }
    });
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        formWindowClosing(evt);
      }
    });
    getContentPane().setLayout(new java.awt.GridBagLayout());

    spMain.setDividerLocation(SETTINGS.getProperty(MAIN_DIVIDER_SETTING, 375));
    spMain.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
      public void propertyChange(java.beans.PropertyChangeEvent evt) {
        spMainPropertyChange(evt);
      }
    });

    spLeft.setBorder(null);

    pLeft.setLayout(new java.awt.GridLayout(0, 1, 0, 5));
    spLeft.setViewportView(pLeft);

    spMain.setLeftComponent(spLeft);

    spRight.setBorder(null);
    spMain.setRightComponent(spRight);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 6;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
    getContentPane().add(spMain, gridBagConstraints);

    bStopAll.setText("Stop all");
    bStopAll.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        bStopAllActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
    getContentPane().add(bStopAll, gridBagConstraints);

    bStartAll.setText("Start all");
    bStartAll.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        bStartAllActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    getContentPane().add(bStartAll, gridBagConstraints);

    bNew.setText("New");
    bNew.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        bNewActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
    getContentPane().add(bNew, gridBagConstraints);

    bExport.setText("Export");
    bExport.setEnabled(false);
    bExport.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        bExportActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
    getContentPane().add(bExport, gridBagConstraints);

    bLoad.setText("Load");
    bLoad.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        bLoadActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
    getContentPane().add(bLoad, gridBagConstraints);

    bDelete.setText("Delete");
    bDelete.setEnabled(false);
    bDelete.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        bDeleteActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
    getContentPane().add(bDelete, gridBagConstraints);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void bNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNewActionPerformed
    Object selection = JOptionPane.showInputDialog(this, "What type would you like?", "Type selection", JOptionPane.QUESTION_MESSAGE, null, new String[]{ONETIME, TIMED}, null);
    if (selection != null) {
      String name = JOptionPane.showInputDialog(this, "What will the name be?", "Name", JOptionPane.QUESTION_MESSAGE, null, null, "Randomizer #" + (pLeft.getComponentCount() + 1)).toString();
      switch (selection.toString()) {
        case ONETIME:
          addRandomizer(new Randomizer(name));
          break;
        case TIMED:
          addRandomizer(new TimedRandomizer(name));
          break;
        default:
          break;
      }
    }
  }//GEN-LAST:event_bNewActionPerformed

  private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
    if (evt.getNewState() != ICONIFIED) {
      SETTINGS.setProperty(MAIN_STATE_SETTING, evt.getNewState());
    }
  }//GEN-LAST:event_formWindowStateChanged

  private void spMainPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_spMainPropertyChange
    if (evt.getPropertyName().equalsIgnoreCase("dividerLocation")) {
      int value = (int) evt.getNewValue();
      if (value > 0) {
        SETTINGS.setProperty(MAIN_DIVIDER_SETTING, value);
      }
    }
  }//GEN-LAST:event_spMainPropertyChange

  private void formComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentMoved
    if (getExtendedState() == NORMAL) {
      SETTINGS.setProperty(MAIN_X_SETTING, getLocation().x);
      SETTINGS.setProperty(MAIN_Y_SETTING, getLocation().y);
    }
  }//GEN-LAST:event_formComponentMoved

  private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
    if (getExtendedState() == NORMAL) {
      SETTINGS.setProperty(MAIN_HEIGHT_SETTING, getHeight());
      SETTINGS.setProperty(MAIN_WIDTH_SETTING, getWidth());
    }
    if (getExtendedState() != ICONIFIED) {
      SETTINGS.setProperty(MAIN_STATE_SETTING, getExtendedState());
    }
  }//GEN-LAST:event_formComponentResized

  private void bStopAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bStopAllActionPerformed
    for (Component component : pLeft.getComponents()) {
      if (component instanceof TimedRandomizerPanel) {
        ((TimedRandomizerPanel) component).stop();
      }
    }
  }//GEN-LAST:event_bStopAllActionPerformed

  private void bDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteActionPerformed
    Component right = spRight.getViewport().getView();
    if (right instanceof EditRandomizerPanel) {
      Randomizer randomizer = ((EditRandomizerPanel) right).getRandomizer();
      pLeft.remove(randomizer.getPanel());
      pLeft.revalidate();
      setRight(null);
    }
  }//GEN-LAST:event_bDeleteActionPerformed

  private void bLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLoadActionPerformed
    JFileChooser fileChooser = new JFileChooser(SETTINGS.getPropertyFile("core.file.load", null));
    fileChooser.setMultiSelectionEnabled(false);
    fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
      File selectedFile = fileChooser.getSelectedFile();
      try {
        Randomizer randomizer = mapper.readValue(selectedFile, TR_RANDOMIZER);
        addRandomizer(randomizer);
      } catch (IOException e) {
        log.error("Unable to load from file {}", selectedFile, e);
      }
    }
  }//GEN-LAST:event_bLoadActionPerformed

  private void bExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExportActionPerformed
    Component view = spRight.getViewport().getView();
    if (view instanceof EditRandomizerPanel) {
      Randomizer randomizer = ((EditRandomizerPanel) view).getRandomizer();
      JFileChooser fileChooser = new JFileChooser(SETTINGS.getPropertyFile("core.file.save", null));
      fileChooser.setSelectedFile(new File(randomizer.getName() + ".randomizer"));
      fileChooser.setMultiSelectionEnabled(false);
      fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
      if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();
        try {
          mapper.writerFor(TR_RANDOMIZER).writeValue(selectedFile, randomizer);
        } catch (IOException e) {
          log.error("Unable to write randomizer to file {}", selectedFile, e);
        }
      }
    }
  }//GEN-LAST:event_bExportActionPerformed

  private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    List<Randomizer> randomizers = new ArrayList<>();
    for (Component component : pLeft.getComponents()) {
      if (component instanceof AbstractRandomizerPanel) {
        Randomizer randomizer = ((AbstractRandomizerPanel) component).getRandomizer();
        randomizers.add(randomizer);
      }
    }
    File storageFile = SETTINGS.getInternalFile(STORAGE_FILE);
    try {
      mapper.writerFor(TR_RANDOMIZER_LIST).writeValue(storageFile, randomizers);
    } catch (IOException e) {
      log.error("Unable to store current randomizers", e);
    }
  }//GEN-LAST:event_formWindowClosing

  private void bStartAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bStartAllActionPerformed
    for (Component component : pLeft.getComponents()) {
      if (component instanceof TimedRandomizerPanel) {
        ((TimedRandomizerPanel) component).start();
      }
    }
  }//GEN-LAST:event_bStartAllActionPerformed

  public static Main getInstance() {
    return INSTANCE;
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(() -> {
      INSTANCE.setVisible(true);
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton bDelete;
  private javax.swing.JButton bExport;
  private javax.swing.JButton bLoad;
  private javax.swing.JButton bNew;
  private javax.swing.JButton bStartAll;
  private javax.swing.JButton bStopAll;
  private javax.swing.JPanel pLeft;
  private javax.swing.JScrollPane spLeft;
  private javax.swing.JSplitPane spMain;
  private javax.swing.JScrollPane spRight;
  // End of variables declaration//GEN-END:variables
}
