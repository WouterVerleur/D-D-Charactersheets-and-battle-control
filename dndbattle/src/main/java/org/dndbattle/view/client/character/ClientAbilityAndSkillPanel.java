/*
 * Copyright (C) 2018 Wouter
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.dndbattle.view.client.character;

import org.dndbattle.objects.ICharacter;
import org.dndbattle.objects.IExtendedCharacter;
import org.dndbattle.objects.enums.AbilityType;
import org.dndbattle.objects.enums.SkillType;
import org.dndbattle.utils.GlobalUtils;

/**
 *
 * @author Wouter
 */
public class ClientAbilityAndSkillPanel extends javax.swing.JPanel {

  private static final String TRANSFORMATION_FORMAT = "%s up to %s";
  private static final String NONE = "None";

  private final ICharacter character;
  private final String transformationString;
  private final String hitDiceString;

  public ClientAbilityAndSkillPanel(ICharacter character) {
    this.character = character;
    if (character.isCanTransform()) {
      transformationString = String.format(TRANSFORMATION_FORMAT, character.getTransformType().getSimpleName(), character.getTransformChallengeRating());
    } else {
      transformationString = NONE;
    }
    if (character instanceof IExtendedCharacter) {
      hitDiceString = ((IExtendedCharacter) character).getHitDice();
    } else {
      hitDiceString = NONE;
    }
    initComponents();
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    spAbility = new javax.swing.JScrollPane();
    pAbility = new javax.swing.JPanel();
    spSavingThrow = new javax.swing.JScrollPane();
    pSavingThrow = new javax.swing.JPanel();
    spSkill = new javax.swing.JScrollPane();
    pSkill = new javax.swing.JPanel();
    pHealth = new javax.swing.JPanel();
    lHealth = new javax.swing.JLabel();
    pPassiveWisdom = new javax.swing.JPanel();
    lPassiveWisdomModifier = new javax.swing.JLabel();
    pInitiative = new javax.swing.JPanel();
    lInitiative = new javax.swing.JLabel();
    pProficiency = new javax.swing.JPanel();
    lProficiency = new javax.swing.JLabel();
    pArmorClass = new javax.swing.JPanel();
    lArmorClass = new javax.swing.JLabel();
    pHitDice = new javax.swing.JPanel();
    lHitDice = new javax.swing.JLabel();
    pTransform = new javax.swing.JPanel();
    lTransformation = new javax.swing.JLabel();
    pSize = new javax.swing.JPanel();
    lSize = new javax.swing.JLabel();
    pSpeed = new javax.swing.JPanel();
    lSize1 = new javax.swing.JLabel();
    spNotes = new javax.swing.JScrollPane();
    taNotes = new javax.swing.JTextArea();

    setLayout(new java.awt.GridBagLayout());

    pAbility.setLayout(new java.awt.GridLayout(0, 1));

    for (AbilityType abilityType : AbilityType.values()){
      pAbility.add(new org.dndbattle.view.client.character.ClientAbilityPanel(character, abilityType));
    }

    spAbility.setViewportView(pAbility);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridheight = 10;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 75;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
    add(spAbility, gridBagConstraints);

    pSavingThrow.setLayout(new java.awt.GridLayout(0, 1));

    for (AbilityType abilityType : AbilityType.values()){
      pSavingThrow.add(new org.dndbattle.view.client.character.ClientSavingThrowPanel(character, abilityType));
    }

    spSavingThrow.setViewportView(pSavingThrow);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridheight = 10;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 125;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
    add(spSavingThrow, gridBagConstraints);

    pSkill.setLayout(new java.awt.GridLayout(0, 1));

    for (SkillType skillType : SkillType.values()){
      pSkill.add(new org.dndbattle.view.client.character.ClientSkillPanel(character, skillType));
    }

    spSkill.setViewportView(pSkill);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridheight = 10;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 125;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
    add(spSkill, gridBagConstraints);

    pHealth.setBorder(javax.swing.BorderFactory.createTitledBorder("Health"));
    pHealth.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

    lHealth.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lHealth.setText(Integer.toString(character.getMaxHealth()));

    javax.swing.GroupLayout pHealthLayout = new javax.swing.GroupLayout(pHealth);
    pHealth.setLayout(pHealthLayout);
    pHealthLayout.setHorizontalGroup(
      pHealthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(lHealth, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
    );
    pHealthLayout.setVerticalGroup(
      pHealthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(lHealth)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
    add(pHealth, gridBagConstraints);

    pPassiveWisdom.setBorder(javax.swing.BorderFactory.createTitledBorder("Passive Perception"));
    pPassiveWisdom.setMinimumSize(new java.awt.Dimension(100, 40));
    pPassiveWisdom.setPreferredSize(new java.awt.Dimension(100, 40));

    lPassiveWisdomModifier.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lPassiveWisdomModifier.setText(Integer.toString(character.getPassiveWisdom()));

    javax.swing.GroupLayout pPassiveWisdomLayout = new javax.swing.GroupLayout(pPassiveWisdom);
    pPassiveWisdom.setLayout(pPassiveWisdomLayout);
    pPassiveWisdomLayout.setHorizontalGroup(
      pPassiveWisdomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(lPassiveWisdomModifier, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
    );
    pPassiveWisdomLayout.setVerticalGroup(
      pPassiveWisdomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(lPassiveWisdomModifier)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
    add(pPassiveWisdom, gridBagConstraints);

    pInitiative.setBorder(javax.swing.BorderFactory.createTitledBorder("Initiative"));
    pInitiative.setMinimumSize(new java.awt.Dimension(100, 40));

    lInitiative.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lInitiative.setText(GlobalUtils.modifierToString(character.getInitiative()));

    javax.swing.GroupLayout pInitiativeLayout = new javax.swing.GroupLayout(pInitiative);
    pInitiative.setLayout(pInitiativeLayout);
    pInitiativeLayout.setHorizontalGroup(
      pInitiativeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(lInitiative, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
    );
    pInitiativeLayout.setVerticalGroup(
      pInitiativeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(lInitiative)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
    add(pInitiative, gridBagConstraints);

    pProficiency.setBorder(javax.swing.BorderFactory.createTitledBorder("Proficiency"));

    lProficiency.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lProficiency.setText(GlobalUtils.modifierToString(character.getProficiencyScore())+(character.isJackOfAllTrades()?" (+"+Math.floorDiv(character.getProficiencyScore(), 2)+")":""));

    javax.swing.GroupLayout pProficiencyLayout = new javax.swing.GroupLayout(pProficiency);
    pProficiency.setLayout(pProficiencyLayout);
    pProficiencyLayout.setHorizontalGroup(
      pProficiencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(lProficiency, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
    );
    pProficiencyLayout.setVerticalGroup(
      pProficiencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(lProficiency)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
    add(pProficiency, gridBagConstraints);

    pArmorClass.setBorder(javax.swing.BorderFactory.createTitledBorder("Armor Class"));

    lArmorClass.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lArmorClass.setText(character.getArmorClassString());

    javax.swing.GroupLayout pArmorClassLayout = new javax.swing.GroupLayout(pArmorClass);
    pArmorClass.setLayout(pArmorClassLayout);
    pArmorClassLayout.setHorizontalGroup(
      pArmorClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(lArmorClass, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
    );
    pArmorClassLayout.setVerticalGroup(
      pArmorClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pArmorClassLayout.createSequentialGroup()
        .addGap(0, 0, Short.MAX_VALUE)
        .addComponent(lArmorClass))
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
    add(pArmorClass, gridBagConstraints);

    pHitDice.setBorder(javax.swing.BorderFactory.createTitledBorder("Hit Dice"));

    lHitDice.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lHitDice.setText(hitDiceString);

    javax.swing.GroupLayout pHitDiceLayout = new javax.swing.GroupLayout(pHitDice);
    pHitDice.setLayout(pHitDiceLayout);
    pHitDiceLayout.setHorizontalGroup(
      pHitDiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(lHitDice, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
    );
    pHitDiceLayout.setVerticalGroup(
      pHitDiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(lHitDice)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
    add(pHitDice, gridBagConstraints);

    pTransform.setBorder(javax.swing.BorderFactory.createTitledBorder("Transform"));

    lTransformation.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lTransformation.setText(transformationString);

    javax.swing.GroupLayout pTransformLayout = new javax.swing.GroupLayout(pTransform);
    pTransform.setLayout(pTransformLayout);
    pTransformLayout.setHorizontalGroup(
      pTransformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(lTransformation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
    );
    pTransformLayout.setVerticalGroup(
      pTransformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(lTransformation)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
    add(pTransform, gridBagConstraints);

    pSize.setBorder(javax.swing.BorderFactory.createTitledBorder("Size"));

    lSize.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lSize.setText(character.getSize().toString());

    javax.swing.GroupLayout pSizeLayout = new javax.swing.GroupLayout(pSize);
    pSize.setLayout(pSizeLayout);
    pSizeLayout.setHorizontalGroup(
      pSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(lSize, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
    );
    pSizeLayout.setVerticalGroup(
      pSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(lSize)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
    add(pSize, gridBagConstraints);

    pSpeed.setBorder(javax.swing.BorderFactory.createTitledBorder("Speed"));

    lSize1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lSize1.setText(String.valueOf(character.getSpeed()));

    javax.swing.GroupLayout pSpeedLayout = new javax.swing.GroupLayout(pSpeed);
    pSpeed.setLayout(pSpeedLayout);
    pSpeedLayout.setHorizontalGroup(
      pSpeedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(lSize1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
    );
    pSpeedLayout.setVerticalGroup(
      pSpeedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(lSize1)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
    add(pSpeed, gridBagConstraints);

    taNotes.setEditable(false);
    taNotes.setColumns(20);
    taNotes.setLineWrap(true);
    taNotes.setText(character.getNotes());
    taNotes.setWrapStyleWord(true);
    spNotes.setViewportView(taNotes);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 9;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 100;
    gridBagConstraints.ipady = 50;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    add(spNotes, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel lArmorClass;
  private javax.swing.JLabel lHealth;
  private javax.swing.JLabel lHitDice;
  private javax.swing.JLabel lInitiative;
  private javax.swing.JLabel lPassiveWisdomModifier;
  private javax.swing.JLabel lProficiency;
  private javax.swing.JLabel lSize;
  private javax.swing.JLabel lSize1;
  private javax.swing.JLabel lTransformation;
  private javax.swing.JPanel pAbility;
  private javax.swing.JPanel pArmorClass;
  private javax.swing.JPanel pHealth;
  private javax.swing.JPanel pHitDice;
  private javax.swing.JPanel pInitiative;
  private javax.swing.JPanel pPassiveWisdom;
  private javax.swing.JPanel pProficiency;
  private javax.swing.JPanel pSavingThrow;
  private javax.swing.JPanel pSize;
  private javax.swing.JPanel pSkill;
  private javax.swing.JPanel pSpeed;
  private javax.swing.JPanel pTransform;
  private javax.swing.JScrollPane spAbility;
  private javax.swing.JScrollPane spNotes;
  private javax.swing.JScrollPane spSavingThrow;
  private javax.swing.JScrollPane spSkill;
  private javax.swing.JTextArea taNotes;
  // End of variables declaration//GEN-END:variables

}
