/*
 * Copyright (C) 2018 Wouter
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.wouter.dndbattle.view.master.weapons;

import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import com.wouter.dndbattle.objects.IWeapon;
import com.wouter.dndbattle.objects.enums.Dice;
import com.wouter.dndbattle.objects.enums.WeaponType;
import com.wouter.dndbattle.objects.impl.Weapon;
import com.wouter.dndbattle.utils.GlobalUtils;
import com.wouter.dndbattle.utils.Weapons;
import com.wouter.dndbattle.view.IUpdateablePanel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Wouter
 */
public class WeaponsPanel extends javax.swing.JPanel implements IUpdateablePanel {

    private static final Logger log = LoggerFactory.getLogger(WeaponsPanel.class);

    private static final Weapons weapons = Weapons.getInstance();

    private List<Weapon> simpleWeapons;
    private List<Weapon> martialWeapons;

    public WeaponsPanel() {
        initComponents();
        update();
    }

    @Override
    public final void update() {
        DefaultTableModel tSimpleModel = (DefaultTableModel) tSimple.getModel();
        DefaultTableModel tMartialModel = (DefaultTableModel) tMartial.getModel();
        simpleWeapons = new ArrayList<>();
        martialWeapons = new ArrayList<>();
        tSimpleModel.setRowCount(0);
        tMartialModel.setRowCount(0);
        for (IWeapon weapon : weapons.getAll()) {
            if (weapon instanceof Weapon) {
                Object[] row = new Object[]{weapon.getName(), GlobalUtils.getWeaponDamage(weapon, weapon.getAttackDice() == Dice.NONE ? Integer.toString(weapon.getAmountOfAttackDice()) : ""), weapon.getNotes()};
                switch (weapon.getType()) {
                    case MARTIAL:
                        tMartialModel.addRow(row);
                        martialWeapons.add((Weapon) weapon);
                        break;
                    case SIMPLE:
                        tSimpleModel.addRow(row);
                        simpleWeapons.add((Weapon) weapon);
                        break;
                    default:
                        log.error("The type of the weapon [{}] was set to [{}], but the code does not allow that setting.", weapon, weapon.getType());
                        break;
                }
            }
        }
    }

    private void delete(Weapon weapon) {
        switch (JOptionPane.showConfirmDialog(this, "Are you sure that you wish to delete the weapon " + weapon + "?\n\nThis cannot be undone!", "Please conform", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE)) {
            case JOptionPane.YES_OPTION:
                weapons.remove(weapon);
                update();
                break;
            default:
                break;
        }

    }

    private Weapon getSelectedObject(List<Weapon> list, JTable table) {
        int selection = table.getSelectedRow();
        if (selection < 0 || selection >= list.size()) {
            return null;
        }
        return list.get(table.getSelectedRow());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lSimple = new javax.swing.JLabel();
        bDeleteSimple = new javax.swing.JButton();
        bEditSimple = new javax.swing.JButton();
        bNewSimple = new javax.swing.JButton();
        spSimple = new javax.swing.JScrollPane();
        tSimple = new javax.swing.JTable();
        lMartial = new javax.swing.JLabel();
        bDeleteMartial = new javax.swing.JButton();
        bEditMartial = new javax.swing.JButton();
        bNewMartial = new javax.swing.JButton();
        spMartial = new javax.swing.JScrollPane();
        tMartial = new javax.swing.JTable();

        setLayout(new java.awt.GridBagLayout());

        lSimple.setText("Simple Weapons");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(lSimple, gridBagConstraints);

        bDeleteSimple.setText("Delete");
        bDeleteSimple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteSimpleActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(bDeleteSimple, gridBagConstraints);

        bEditSimple.setText("Edit");
        bEditSimple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEditSimpleActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(bEditSimple, gridBagConstraints);

        bNewSimple.setText("New");
        bNewSimple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNewSimpleActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(bNewSimple, gridBagConstraints);

        tSimple.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Damage", "Notes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tSimple.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tSimple.getTableHeader().setReorderingAllowed(false);
        spSimple.setViewportView(tSimple);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(spSimple, gridBagConstraints);

        lMartial.setText("Martial Weapons");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(lMartial, gridBagConstraints);

        bDeleteMartial.setText("Delete");
        bDeleteMartial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteMartialActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(bDeleteMartial, gridBagConstraints);

        bEditMartial.setText("Edit");
        bEditMartial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEditMartialActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(bEditMartial, gridBagConstraints);

        bNewMartial.setText("New");
        bNewMartial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNewMartialActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(bNewMartial, gridBagConstraints);

        tMartial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Damage", "Notes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tMartial.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tMartial.getTableHeader().setReorderingAllowed(false);
        spMartial.setViewportView(tMartial);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(spMartial, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void bNewSimpleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNewSimpleActionPerformed
        showEditPopup(new Weapon(WeaponType.SIMPLE));
    }//GEN-LAST:event_bNewSimpleActionPerformed

    private void bNewMartialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNewMartialActionPerformed
        showEditPopup(new Weapon(WeaponType.MARTIAL));
    }//GEN-LAST:event_bNewMartialActionPerformed

    private void bEditSimpleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEditSimpleActionPerformed
        showEditPopup(getSelectedObject(simpleWeapons, tSimple));
    }//GEN-LAST:event_bEditSimpleActionPerformed

    private void bEditMartialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEditMartialActionPerformed
        showEditPopup(getSelectedObject(martialWeapons, tMartial));
    }//GEN-LAST:event_bEditMartialActionPerformed

    private void bDeleteSimpleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteSimpleActionPerformed
        delete(getSelectedObject(simpleWeapons, tSimple));
    }//GEN-LAST:event_bDeleteSimpleActionPerformed

    private void bDeleteMartialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteMartialActionPerformed
        delete(getSelectedObject(martialWeapons, tMartial));
    }//GEN-LAST:event_bDeleteMartialActionPerformed

    private void showEditPopup(Weapon weapon) {
        if (weapon == null) {
            return;
        }
        WeaponEditPanel weaponEditPanel = new WeaponEditPanel(weapon);
        switch (JOptionPane.showConfirmDialog(this, weaponEditPanel, "Edit weapon", JOptionPane.OK_CANCEL_OPTION)) {
            case JOptionPane.OK_OPTION:
                weapons.update(weaponEditPanel.getWeapon());
            default:
                break;
        }
        update();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bDeleteMartial;
    private javax.swing.JButton bDeleteSimple;
    private javax.swing.JButton bEditMartial;
    private javax.swing.JButton bEditSimple;
    private javax.swing.JButton bNewMartial;
    private javax.swing.JButton bNewSimple;
    private javax.swing.JLabel lMartial;
    private javax.swing.JLabel lSimple;
    private javax.swing.JScrollPane spMartial;
    private javax.swing.JScrollPane spSimple;
    private javax.swing.JTable tMartial;
    private javax.swing.JTable tSimple;
    // End of variables declaration//GEN-END:variables

    public void removeWeapon(Weapon weapon) {
        weapons.remove(weapon);
    }
}
