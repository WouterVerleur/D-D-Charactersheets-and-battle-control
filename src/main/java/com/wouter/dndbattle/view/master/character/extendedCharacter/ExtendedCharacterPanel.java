/*
 * Copyright (C) 2018 Wouter
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.wouter.dndbattle.view.master.character.extendedCharacter;

import javax.swing.JOptionPane;

import com.wouter.dndbattle.objects.impl.AbstractExtendedCharacter;
import com.wouter.dndbattle.objects.impl.CharacterClass;
import com.wouter.dndbattle.utils.Characters;
import com.wouter.dndbattle.view.IUpdateablePanel;
import com.wouter.dndbattle.view.master.character.CharacterPanel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Wouter
 */
public class ExtendedCharacterPanel extends javax.swing.JPanel implements IUpdateablePanel {

    private static final Logger log = LoggerFactory.getLogger(ExtendedCharacterPanel.class);

    private final AbstractExtendedCharacter character;
    private final CharacterPanel characterPanel;

    public ExtendedCharacterPanel(AbstractExtendedCharacter character, CharacterPanel characterPanel) {
        this.character = character;
        this.characterPanel = characterPanel;
        initComponents();
        refreshClasses();
    }

    public void saveCharacter() {
        Characters.updateCharacter(character);
    }

    @Override
    public void update() {
        refreshClasses();
    }

    public void updateAll() {
        characterPanel.updateAll();
    }

    public void removeClass(CharacterClass characterClass) {
        character.removeCharacterClass(characterClass);
        saveCharacter();
    }

    private void refreshClasses() {
        pClasses.removeAll();
        character.getCharacterClasses().forEach((characterClass) -> {
            pClasses.add(new CharacterClassPanel((CharacterClass) characterClass, this));
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        spClasses = new javax.swing.JScrollPane();
        pClasses = new javax.swing.JPanel();
        lClasses = new javax.swing.JLabel();
        bAddClass = new javax.swing.JButton();
        sepClass = new javax.swing.JSeparator();
        spCharacterFields = new javax.swing.JScrollPane();
        pCharacterFields = new javax.swing.JPanel();
        lPlayerName = new javax.swing.JLabel();
        tfPlayerName = new javax.swing.JTextField();
        lRace = new javax.swing.JLabel();
        tfRace = new javax.swing.JTextField();
        lBackground = new javax.swing.JLabel();
        tfBackground = new javax.swing.JTextField();
        lAlignment = new javax.swing.JLabel();
        tfAlignment = new javax.swing.JTextField();
        lExperiencePoints = new javax.swing.JLabel();
        sExperiencePoints = new javax.swing.JSpinner();
        lSpeed = new javax.swing.JLabel();
        sSpeed = new javax.swing.JSpinner();
        sepChar1 = new javax.swing.JSeparator();
        lAge = new javax.swing.JLabel();
        sAge = new javax.swing.JSpinner();
        lHeight = new javax.swing.JLabel();
        tfHeight = new javax.swing.JTextField();
        lWeight = new javax.swing.JLabel();
        tfWeight = new javax.swing.JTextField();
        lEyes = new javax.swing.JLabel();
        tfEyes = new javax.swing.JTextField();
        lSkin = new javax.swing.JLabel();
        tfSkin = new javax.swing.JTextField();
        lHair = new javax.swing.JLabel();
        tfHair = new javax.swing.JTextField();
        sepChar2 = new javax.swing.JSeparator();
        spProficiencies = new javax.swing.JScrollPane();
        taProficiencies = new javax.swing.JTextArea();
        spLanguages = new javax.swing.JScrollPane();
        taLanguages = new javax.swing.JTextArea();
        spPersonalityTraits = new javax.swing.JScrollPane();
        taPersonalityTraits = new javax.swing.JTextArea();
        spIdeals = new javax.swing.JScrollPane();
        taIdeals = new javax.swing.JTextArea();
        spBonds = new javax.swing.JScrollPane();
        taBonds = new javax.swing.JTextArea();
        spFlaws = new javax.swing.JScrollPane();
        taFlaws = new javax.swing.JTextArea();
        spEquipment = new javax.swing.JScrollPane();
        taEquipment = new javax.swing.JTextArea();
        spTreasure = new javax.swing.JScrollPane();
        taTreasure = new javax.swing.JTextArea();
        spAlliesAndOrganisations = new javax.swing.JScrollPane();
        taAlliesAndOrganisations = new javax.swing.JTextArea();
        spBackstory = new javax.swing.JScrollPane();
        taBackstory = new javax.swing.JTextArea();
        sepFeatures = new javax.swing.JSeparator();
        lFeatures = new javax.swing.JLabel();
        spFeatures = new javax.swing.JScrollPane();
        taFeatures = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());

        spClasses.setBorder(null);

        pClasses.setLayout(new javax.swing.BoxLayout(pClasses, javax.swing.BoxLayout.Y_AXIS));
        spClasses.setViewportView(pClasses);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.ipady = 256;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(spClasses, gridBagConstraints);

        lClasses.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lClasses.setText("Classes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 64;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lClasses, gridBagConstraints);

        bAddClass.setText("Add Class");
        bAddClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddClassActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        add(bAddClass, gridBagConstraints);

        sepClass.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.ipady = 326;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(sepClass, gridBagConstraints);

        spCharacterFields.setBorder(null);

        pCharacterFields.setLayout(new java.awt.GridBagLayout());

        lPlayerName.setText("Player Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        pCharacterFields.add(lPlayerName, gridBagConstraints);

        tfPlayerName.setText(character.getPlayerName());
        tfPlayerName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfPlayerNameKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfPlayerNameKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pCharacterFields.add(tfPlayerName, gridBagConstraints);

        lRace.setText("Race");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        pCharacterFields.add(lRace, gridBagConstraints);

        tfRace.setText(character.getRace());
        tfRace.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfRaceKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfRaceKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pCharacterFields.add(tfRace, gridBagConstraints);

        lBackground.setText("Background");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        pCharacterFields.add(lBackground, gridBagConstraints);

        tfBackground.setText(character.getBackground());
        tfBackground.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfBackgroundKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfBackgroundKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pCharacterFields.add(tfBackground, gridBagConstraints);

        lAlignment.setText("Alignment");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        pCharacterFields.add(lAlignment, gridBagConstraints);

        tfAlignment.setText(character.getAlignment());
        tfAlignment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfAlignmentKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfAlignmentKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pCharacterFields.add(tfAlignment, gridBagConstraints);

        lExperiencePoints.setText("Experience Points");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        pCharacterFields.add(lExperiencePoints, gridBagConstraints);

        sExperiencePoints.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 100));
        sExperiencePoints.setValue(character.getExperiencePoints());
        sExperiencePoints.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sExperiencePointsStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pCharacterFields.add(sExperiencePoints, gridBagConstraints);

        lSpeed.setText("Speed");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        pCharacterFields.add(lSpeed, gridBagConstraints);

        sSpeed.setModel(new javax.swing.SpinnerNumberModel(30, 0, null, 5));
        sSpeed.setValue(character.getSpeed());
        sSpeed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sSpeedStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pCharacterFields.add(sSpeed, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pCharacterFields.add(sepChar1, gridBagConstraints);

        lAge.setText("Age");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        pCharacterFields.add(lAge, gridBagConstraints);

        sAge.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        sAge.setValue(character.getAge());
        sAge.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sAgeStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pCharacterFields.add(sAge, gridBagConstraints);

        lHeight.setText("Height");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        pCharacterFields.add(lHeight, gridBagConstraints);

        tfHeight.setText(character.getHeight());
        tfHeight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfHeightKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfHeightKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pCharacterFields.add(tfHeight, gridBagConstraints);

        lWeight.setText("Weight");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        pCharacterFields.add(lWeight, gridBagConstraints);

        tfWeight.setText(character.getWeight());
        tfWeight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfWeightKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfWeightKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pCharacterFields.add(tfWeight, gridBagConstraints);

        lEyes.setText("Eyes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        pCharacterFields.add(lEyes, gridBagConstraints);

        tfEyes.setText(character.getEyes());
        tfEyes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfEyesKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfEyesKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pCharacterFields.add(tfEyes, gridBagConstraints);

        lSkin.setText("Skin");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        pCharacterFields.add(lSkin, gridBagConstraints);

        tfSkin.setText(character.getSkin());
        tfSkin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfSkinKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfSkinKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pCharacterFields.add(tfSkin, gridBagConstraints);

        lHair.setText("Hair");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        pCharacterFields.add(lHair, gridBagConstraints);

        tfHair.setText(character.getHair());
        tfHair.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfHairKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfHairKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pCharacterFields.add(tfHair, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        pCharacterFields.add(sepChar2, gridBagConstraints);

        spProficiencies.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Other proficiencies", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        taProficiencies.setColumns(20);
        taProficiencies.setLineWrap(true);
        taProficiencies.setText(character.getProficiencies());
        taProficiencies.setWrapStyleWord(true);
        taProficiencies.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                taProficienciesFocusLost(evt);
            }
        });
        taProficiencies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                taProficienciesKeyReleased(evt);
            }
        });
        spProficiencies.setViewportView(taProficiencies);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        pCharacterFields.add(spProficiencies, gridBagConstraints);

        spLanguages.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Languages", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        taLanguages.setColumns(20);
        taLanguages.setLineWrap(true);
        taLanguages.setText(character.getLanguages());
        taLanguages.setWrapStyleWord(true);
        taLanguages.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                taLanguagesFocusLost(evt);
            }
        });
        taLanguages.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                taLanguagesKeyReleased(evt);
            }
        });
        spLanguages.setViewportView(taLanguages);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pCharacterFields.add(spLanguages, gridBagConstraints);

        spPersonalityTraits.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Personality traits", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        taPersonalityTraits.setColumns(20);
        taPersonalityTraits.setLineWrap(true);
        taPersonalityTraits.setText(character.getPersonalityTraits());
        taPersonalityTraits.setWrapStyleWord(true);
        taPersonalityTraits.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                taPersonalityTraitsFocusLost(evt);
            }
        });
        taPersonalityTraits.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                taPersonalityTraitsKeyReleased(evt);
            }
        });
        spPersonalityTraits.setViewportView(taPersonalityTraits);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        pCharacterFields.add(spPersonalityTraits, gridBagConstraints);

        spIdeals.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Ideals", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        taIdeals.setColumns(20);
        taIdeals.setLineWrap(true);
        taIdeals.setText(character.getIdeals());
        taIdeals.setWrapStyleWord(true);
        taIdeals.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                taIdealsFocusLost(evt);
            }
        });
        taIdeals.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                taIdealsKeyReleased(evt);
            }
        });
        spIdeals.setViewportView(taIdeals);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pCharacterFields.add(spIdeals, gridBagConstraints);

        spBonds.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Bonds", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        taBonds.setColumns(20);
        taBonds.setLineWrap(true);
        taBonds.setText(character.getBonds());
        taBonds.setWrapStyleWord(true);
        taBonds.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                taBondsFocusLost(evt);
            }
        });
        taBonds.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                taBondsKeyReleased(evt);
            }
        });
        spBonds.setViewportView(taBonds);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        pCharacterFields.add(spBonds, gridBagConstraints);

        spFlaws.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Flaws", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        taFlaws.setColumns(20);
        taFlaws.setLineWrap(true);
        taFlaws.setText(character.getFlaws());
        taFlaws.setWrapStyleWord(true);
        taFlaws.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                taFlawsFocusLost(evt);
            }
        });
        taFlaws.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                taFlawsKeyReleased(evt);
            }
        });
        spFlaws.setViewportView(taFlaws);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pCharacterFields.add(spFlaws, gridBagConstraints);

        spEquipment.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Equipment", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        spEquipment.setToolTipText("");

        taEquipment.setColumns(20);
        taEquipment.setLineWrap(true);
        taEquipment.setText(character.getEquipment());
        taEquipment.setWrapStyleWord(true);
        taEquipment.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                taEquipmentFocusLost(evt);
            }
        });
        taEquipment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                taEquipmentKeyReleased(evt);
            }
        });
        spEquipment.setViewportView(taEquipment);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        pCharacterFields.add(spEquipment, gridBagConstraints);

        spTreasure.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Treasure", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        taTreasure.setColumns(20);
        taTreasure.setLineWrap(true);
        taTreasure.setText(character.getTreasure());
        taTreasure.setWrapStyleWord(true);
        taTreasure.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                taTreasureFocusLost(evt);
            }
        });
        taTreasure.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                taTreasureKeyReleased(evt);
            }
        });
        spTreasure.setViewportView(taTreasure);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pCharacterFields.add(spTreasure, gridBagConstraints);

        spAlliesAndOrganisations.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Allies & organisations", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        taAlliesAndOrganisations.setColumns(20);
        taAlliesAndOrganisations.setLineWrap(true);
        taAlliesAndOrganisations.setText(character.getAliesAndOrganizations());
        taAlliesAndOrganisations.setWrapStyleWord(true);
        taAlliesAndOrganisations.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                taAlliesAndOrganisationsFocusLost(evt);
            }
        });
        taAlliesAndOrganisations.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                taAlliesAndOrganisationsKeyReleased(evt);
            }
        });
        spAlliesAndOrganisations.setViewportView(taAlliesAndOrganisations);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        pCharacterFields.add(spAlliesAndOrganisations, gridBagConstraints);

        spBackstory.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Backstory", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        spBackstory.setToolTipText("");

        taBackstory.setColumns(20);
        taBackstory.setLineWrap(true);
        taBackstory.setText(character.getBackstory());
        taBackstory.setWrapStyleWord(true);
        taBackstory.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                taBackstoryFocusLost(evt);
            }
        });
        taBackstory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                taBackstoryKeyReleased(evt);
            }
        });
        spBackstory.setViewportView(taBackstory);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pCharacterFields.add(spBackstory, gridBagConstraints);

        spCharacterFields.setViewportView(pCharacterFields);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(spCharacterFields, gridBagConstraints);

        sepFeatures.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.ipady = 326;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(sepFeatures, gridBagConstraints);

        lFeatures.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lFeatures.setText("Features & Traits");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 19;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
        add(lFeatures, gridBagConstraints);

        taFeatures.setColumns(20);
        taFeatures.setLineWrap(true);
        taFeatures.setRows(5);
        taFeatures.setText(character.getFeaturesAndTraits());
        taFeatures.setWrapStyleWord(true);
        taFeatures.setMinimumSize(new java.awt.Dimension(100, 22));
        taFeatures.setPreferredSize(new java.awt.Dimension(100, 94));
        taFeatures.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                taFeaturesFocusLost(evt);
            }
        });
        taFeatures.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                taFeaturesKeyReleased(evt);
            }
        });
        spFeatures.setViewportView(taFeatures);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        add(spFeatures, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void bAddClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddClassActionPerformed
        String input = JOptionPane.showInputDialog(this, "What is the name of the class?", "Class name", JOptionPane.QUESTION_MESSAGE);
        if (input != null && !input.isEmpty()) {
            CharacterClass characterClass = new CharacterClass();
            characterClass.setName(input);
            character.addCharacterClass(characterClass);
            saveCharacter();
        }
    }//GEN-LAST:event_bAddClassActionPerformed

    private void tfPlayerNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPlayerNameKeyTyped
        character.setPlayerName(tfPlayerName.getText());
        saveCharacter();
    }//GEN-LAST:event_tfPlayerNameKeyTyped

    private void tfRaceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfRaceKeyTyped
        character.setRace(tfRace.getText());
        saveCharacter();
    }//GEN-LAST:event_tfRaceKeyTyped

    private void tfBackgroundKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfBackgroundKeyTyped
        character.setBackground(tfBackground.getText());
        saveCharacter();
    }//GEN-LAST:event_tfBackgroundKeyTyped

    private void tfAlignmentKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfAlignmentKeyTyped
        character.setAlignment(tfAlignment.getText());
        saveCharacter();
    }//GEN-LAST:event_tfAlignmentKeyTyped

    private void sExperiencePointsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sExperiencePointsStateChanged
        character.setExperiencePoints((int) sExperiencePoints.getValue());
        saveCharacter();
    }//GEN-LAST:event_sExperiencePointsStateChanged

    private void sSpeedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sSpeedStateChanged
        character.setSpeed((int) sSpeed.getValue());
        saveCharacter();
    }//GEN-LAST:event_sSpeedStateChanged

    private void sAgeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sAgeStateChanged
        character.setAge((int) sAge.getValue());
        saveCharacter();
    }//GEN-LAST:event_sAgeStateChanged

    private void tfHeightKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfHeightKeyTyped
        character.setHeight(tfHeight.getText());
        saveCharacter();
    }//GEN-LAST:event_tfHeightKeyTyped

    private void tfWeightKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfWeightKeyTyped
        character.setWeight(tfWeight.getText());
        saveCharacter();
    }//GEN-LAST:event_tfWeightKeyTyped

    private void tfEyesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfEyesKeyTyped
        character.setEyes(tfEyes.getText());
        saveCharacter();
    }//GEN-LAST:event_tfEyesKeyTyped

    private void tfSkinKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfSkinKeyTyped
        character.setSkin(tfSkin.getText());
        saveCharacter();
    }//GEN-LAST:event_tfSkinKeyTyped

    private void tfHairKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfHairKeyTyped
        character.setHair(tfHair.getText());
        saveCharacter();
    }//GEN-LAST:event_tfHairKeyTyped

    private void taProficienciesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_taProficienciesFocusLost
        character.setProficiencies(taProficiencies.getText());
        saveCharacter();
    }//GEN-LAST:event_taProficienciesFocusLost

    private void taLanguagesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_taLanguagesFocusLost
        character.setLanguages(taLanguages.getText());
        saveCharacter();
    }//GEN-LAST:event_taLanguagesFocusLost

    private void taPersonalityTraitsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_taPersonalityTraitsFocusLost
        character.setPersonalityTraits(taPersonalityTraits.getText());
        saveCharacter();
    }//GEN-LAST:event_taPersonalityTraitsFocusLost

    private void taIdealsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_taIdealsFocusLost
        character.setIdeals(taIdeals.getText());
        saveCharacter();
    }//GEN-LAST:event_taIdealsFocusLost

    private void taBondsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_taBondsFocusLost
        character.setBonds(taBonds.getText());
        saveCharacter();
    }//GEN-LAST:event_taBondsFocusLost

    private void taFlawsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_taFlawsFocusLost
        character.setFlaws(taFlaws.getText());
        saveCharacter();
    }//GEN-LAST:event_taFlawsFocusLost

    private void taEquipmentFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_taEquipmentFocusLost
        character.setEquipment(taEquipment.getText());
        saveCharacter();
    }//GEN-LAST:event_taEquipmentFocusLost

    private void taTreasureFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_taTreasureFocusLost
        character.setTreasure(taTreasure.getText());
        saveCharacter();
    }//GEN-LAST:event_taTreasureFocusLost

    private void taAlliesAndOrganisationsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_taAlliesAndOrganisationsFocusLost
        character.setAliesAndOrganizations(taAlliesAndOrganisations.getText());
        saveCharacter();
    }//GEN-LAST:event_taAlliesAndOrganisationsFocusLost

    private void taFeaturesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taFeaturesKeyReleased
        taFeaturesFocusLost(null);
    }//GEN-LAST:event_taFeaturesKeyReleased

    private void taBackstoryKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taBackstoryKeyReleased
        taBackstoryFocusLost(null);
    }//GEN-LAST:event_taBackstoryKeyReleased

    private void taAlliesAndOrganisationsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taAlliesAndOrganisationsKeyReleased
        taAlliesAndOrganisationsFocusLost(null);
    }//GEN-LAST:event_taAlliesAndOrganisationsKeyReleased

    private void taBackstoryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_taBackstoryFocusLost
        character.setBackstory(taBackstory.getText());
        saveCharacter();
    }//GEN-LAST:event_taBackstoryFocusLost

    private void taTreasureKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taTreasureKeyReleased
        taTreasureFocusLost(null);
    }//GEN-LAST:event_taTreasureKeyReleased

    private void taEquipmentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taEquipmentKeyReleased
        taEquipmentFocusLost(null);
    }//GEN-LAST:event_taEquipmentKeyReleased

    private void taFlawsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taFlawsKeyReleased
        taFlawsFocusLost(null);
    }//GEN-LAST:event_taFlawsKeyReleased

    private void taIdealsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taIdealsKeyReleased
        taIdealsFocusLost(null);
    }//GEN-LAST:event_taIdealsKeyReleased

    private void taPersonalityTraitsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taPersonalityTraitsKeyReleased
        taPersonalityTraitsFocusLost(null);
    }//GEN-LAST:event_taPersonalityTraitsKeyReleased

    private void taLanguagesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taLanguagesKeyReleased
        taLanguagesFocusLost(null);
    }//GEN-LAST:event_taLanguagesKeyReleased

    private void taProficienciesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taProficienciesKeyReleased
        taProficienciesFocusLost(null);
    }//GEN-LAST:event_taProficienciesKeyReleased

    private void taBondsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taBondsKeyReleased
        taBondsFocusLost(null);
    }//GEN-LAST:event_taBondsKeyReleased

    private void taFeaturesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_taFeaturesFocusLost
        log.debug("Changing features of [{}] to [{}]", character, taFeatures.getText());
        character.setFeaturesAndTraits(taFeatures.getText());
        saveCharacter();
    }//GEN-LAST:event_taFeaturesFocusLost

    private void tfPlayerNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPlayerNameKeyReleased
        tfPlayerNameKeyTyped(evt);
    }//GEN-LAST:event_tfPlayerNameKeyReleased

    private void tfRaceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfRaceKeyReleased
        tfRaceKeyTyped(evt);
    }//GEN-LAST:event_tfRaceKeyReleased

    private void tfBackgroundKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfBackgroundKeyReleased
        tfBackgroundKeyTyped(evt);
    }//GEN-LAST:event_tfBackgroundKeyReleased

    private void tfAlignmentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfAlignmentKeyReleased
        tfAlignmentKeyTyped(evt);
    }//GEN-LAST:event_tfAlignmentKeyReleased

    private void tfHeightKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfHeightKeyReleased
        tfHeightKeyTyped(evt);
    }//GEN-LAST:event_tfHeightKeyReleased

    private void tfWeightKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfWeightKeyReleased
        tfWeightKeyTyped(evt);
    }//GEN-LAST:event_tfWeightKeyReleased

    private void tfEyesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfEyesKeyReleased
        tfEyesKeyTyped(evt);
    }//GEN-LAST:event_tfEyesKeyReleased

    private void tfSkinKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfSkinKeyReleased
        tfSkinKeyTyped(evt);
    }//GEN-LAST:event_tfSkinKeyReleased

    private void tfHairKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfHairKeyReleased
        tfHairKeyTyped(evt);
    }//GEN-LAST:event_tfHairKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAddClass;
    private javax.swing.JLabel lAge;
    private javax.swing.JLabel lAlignment;
    private javax.swing.JLabel lBackground;
    private javax.swing.JLabel lClasses;
    private javax.swing.JLabel lExperiencePoints;
    private javax.swing.JLabel lEyes;
    private javax.swing.JLabel lFeatures;
    private javax.swing.JLabel lHair;
    private javax.swing.JLabel lHeight;
    private javax.swing.JLabel lPlayerName;
    private javax.swing.JLabel lRace;
    private javax.swing.JLabel lSkin;
    private javax.swing.JLabel lSpeed;
    private javax.swing.JLabel lWeight;
    private javax.swing.JPanel pCharacterFields;
    private javax.swing.JPanel pClasses;
    private javax.swing.JSpinner sAge;
    private javax.swing.JSpinner sExperiencePoints;
    private javax.swing.JSpinner sSpeed;
    private javax.swing.JSeparator sepChar1;
    private javax.swing.JSeparator sepChar2;
    private javax.swing.JSeparator sepClass;
    private javax.swing.JSeparator sepFeatures;
    private javax.swing.JScrollPane spAlliesAndOrganisations;
    private javax.swing.JScrollPane spBackstory;
    private javax.swing.JScrollPane spBonds;
    private javax.swing.JScrollPane spCharacterFields;
    private javax.swing.JScrollPane spClasses;
    private javax.swing.JScrollPane spEquipment;
    private javax.swing.JScrollPane spFeatures;
    private javax.swing.JScrollPane spFlaws;
    private javax.swing.JScrollPane spIdeals;
    private javax.swing.JScrollPane spLanguages;
    private javax.swing.JScrollPane spPersonalityTraits;
    private javax.swing.JScrollPane spProficiencies;
    private javax.swing.JScrollPane spTreasure;
    private javax.swing.JTextArea taAlliesAndOrganisations;
    private javax.swing.JTextArea taBackstory;
    private javax.swing.JTextArea taBonds;
    private javax.swing.JTextArea taEquipment;
    private javax.swing.JTextArea taFeatures;
    private javax.swing.JTextArea taFlaws;
    private javax.swing.JTextArea taIdeals;
    private javax.swing.JTextArea taLanguages;
    private javax.swing.JTextArea taPersonalityTraits;
    private javax.swing.JTextArea taProficiencies;
    private javax.swing.JTextArea taTreasure;
    private javax.swing.JTextField tfAlignment;
    private javax.swing.JTextField tfBackground;
    private javax.swing.JTextField tfEyes;
    private javax.swing.JTextField tfHair;
    private javax.swing.JTextField tfHeight;
    private javax.swing.JTextField tfPlayerName;
    private javax.swing.JTextField tfRace;
    private javax.swing.JTextField tfSkin;
    private javax.swing.JTextField tfWeight;
    // End of variables declaration//GEN-END:variables
}
