/*
 * Copyright (C) 2018 wverl
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.wouter.dndbattle.view.master.armor;

import static com.wouter.dndbattle.objects.enums.AbilityType.CHA;
import static com.wouter.dndbattle.objects.enums.AbilityType.CON;
import static com.wouter.dndbattle.objects.enums.AbilityType.INT;
import static com.wouter.dndbattle.objects.enums.AbilityType.STR;
import static com.wouter.dndbattle.objects.enums.AbilityType.WIS;

import javax.swing.JCheckBox;
import javax.swing.JOptionPane;

import com.wouter.dndbattle.objects.enums.AbilityType;
import com.wouter.dndbattle.objects.impl.Armor;
import com.wouter.dndbattle.utils.Armors;

/**
 *
 * @author wverl
 */
class ArmorPanel extends javax.swing.JPanel {

    private static final Armors ARMORS = Armors.getInstance();

    private final Armor armor;
    private final ArmorsPanel armorsPanel;

    ArmorPanel(Armor armor, ArmorsPanel armorsPanel) {
        this.armor = armor;
        this.armorsPanel = armorsPanel;
        initComponents();
        updateLabel();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lName = new javax.swing.JLabel();
        lNameValue = new javax.swing.JLabel();
        bRename = new javax.swing.JButton();
        bDelete = new javax.swing.JButton();
        lType = new javax.swing.JLabel();
        cbArmorType = new com.wouter.dndbattle.view.comboboxes.ArmorTypeComboBox();
        lRating = new javax.swing.JLabel();
        sRating = new javax.swing.JSpinner();
        lModifiers = new javax.swing.JLabel();
        cbCHA = new javax.swing.JCheckBox();
        cbCON = new javax.swing.JCheckBox();
        cbINT = new javax.swing.JCheckBox();
        cbSTR = new javax.swing.JCheckBox();
        cbWIS = new javax.swing.JCheckBox();
        lDisplay = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        lName.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(lName, gridBagConstraints);

        lNameValue.setText(armor.getName());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(lNameValue, gridBagConstraints);

        bRename.setText("Rename");
        bRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRenameActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(bRename, gridBagConstraints);

        bDelete.setText("Delete");
        bDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(bDelete, gridBagConstraints);

        lType.setText("Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(lType, gridBagConstraints);

        cbArmorType.setSelectedItem(armor.getArmorType());
        cbArmorType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbArmorTypeItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(cbArmorType, gridBagConstraints);

        lRating.setText("Rating");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(lRating, gridBagConstraints);

        sRating.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        sRating.setValue(armor.getBaseArmorRating());
        sRating.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sRatingStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(sRating, gridBagConstraints);

        lModifiers.setText("Modifiers");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(lModifiers, gridBagConstraints);

        cbCHA.setSelected(armor.getAdditionalAbilityTypes().contains(CHA));
        cbCHA.setText("Charisma");
        cbCHA.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbCHAItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(cbCHA, gridBagConstraints);

        cbCON.setSelected(armor.getAdditionalAbilityTypes().contains(CON));
        cbCON.setText("Constitution");
        cbCON.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbCONItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(cbCON, gridBagConstraints);

        cbINT.setSelected(armor.getAdditionalAbilityTypes().contains(INT));
        cbINT.setText("Intelligence");
        cbINT.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbINTItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(cbINT, gridBagConstraints);

        cbSTR.setSelected(armor.getAdditionalAbilityTypes().contains(STR));
        cbSTR.setText("Strength");
        cbSTR.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbSTRItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(cbSTR, gridBagConstraints);

        cbWIS.setSelected(armor.getAdditionalAbilityTypes().contains(WIS));
        cbWIS.setText("Wisdom");
        cbWIS.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbWISItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(cbWIS, gridBagConstraints);

        lDisplay.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lDisplay, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void bRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRenameActionPerformed
        Object input = JOptionPane.showInputDialog(this, "Please enter the new name of the armor", "New name", JOptionPane.QUESTION_MESSAGE, null, null, armor.getName());
        if (input != null) {
            String inputStr = input.toString();
            if (!inputStr.isEmpty() && !inputStr.equals(armor.getName())) {
                Armors armors = Armors.getInstance();
                Armor newArmor = new Armor(armor);
                newArmor.setName(inputStr);
                if (armors.add(newArmor)) {
                    armors.remove(armor);
                    armorsPanel.update();
                }
            }
        }
    }//GEN-LAST:event_bRenameActionPerformed

    private void bDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to delete " + armor.getName() + "?\n\nThis cannot be undone.", "Please confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            Armors.getInstance().remove(armor);
            armorsPanel.update();
        }
    }//GEN-LAST:event_bDeleteActionPerformed

    private void cbArmorTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbArmorTypeItemStateChanged
        armor.setArmorType(cbArmorType.getSelectedItem());
        saveArmor(true);
    }//GEN-LAST:event_cbArmorTypeItemStateChanged

    private void cbWISItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbWISItemStateChanged
        checkAdditionalAbilityType(cbWIS, WIS);
    }//GEN-LAST:event_cbWISItemStateChanged

    private void cbCHAItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbCHAItemStateChanged
        checkAdditionalAbilityType(cbCHA, CHA);
    }//GEN-LAST:event_cbCHAItemStateChanged

    private void cbCONItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbCONItemStateChanged
        checkAdditionalAbilityType(cbCON, CON);
    }//GEN-LAST:event_cbCONItemStateChanged

    private void cbINTItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbINTItemStateChanged
        checkAdditionalAbilityType(cbINT, INT);
    }//GEN-LAST:event_cbINTItemStateChanged

    private void cbSTRItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbSTRItemStateChanged
        checkAdditionalAbilityType(cbSTR, STR);
    }//GEN-LAST:event_cbSTRItemStateChanged

    private void sRatingStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sRatingStateChanged
        armor.setBaseArmorRating((Integer) sRating.getValue());
        saveArmor(false);
    }//GEN-LAST:event_sRatingStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bDelete;
    private javax.swing.JButton bRename;
    private com.wouter.dndbattle.view.comboboxes.ArmorTypeComboBox cbArmorType;
    private javax.swing.JCheckBox cbCHA;
    private javax.swing.JCheckBox cbCON;
    private javax.swing.JCheckBox cbINT;
    private javax.swing.JCheckBox cbSTR;
    private javax.swing.JCheckBox cbWIS;
    private javax.swing.JLabel lDisplay;
    private javax.swing.JLabel lModifiers;
    private javax.swing.JLabel lName;
    private javax.swing.JLabel lNameValue;
    private javax.swing.JLabel lRating;
    private javax.swing.JLabel lType;
    private javax.swing.JSpinner sRating;
    // End of variables declaration//GEN-END:variables

    private void checkAdditionalAbilityType(JCheckBox checkBox, AbilityType abilityType) {
        if (checkBox.isSelected()) {
            armor.addAdditionalAbilityType(abilityType);
        } else {
            armor.removeAdditionalAbilityType(abilityType);
        }
        saveArmor(false);
    }

    private void saveArmor(boolean refresh) {
        ARMORS.update(armor);
        updateLabel();
        if (refresh) {
            armorsPanel.update();
        }
    }

    private void updateLabel() {
        StringBuilder builder = new StringBuilder("Armor rating: ");
        builder.append(armor.getBaseArmorRating());
        switch (armor.getArmorType()) {
            case LIGHT:
            case UNARMORED:
                builder.append(" + DEX");
                break;
            case MEDIUM:
                builder.append(" + DEX (max 2)");
                break;
            default:
                break;
        }
        armor.getAdditionalAbilityTypes().forEach((additionalAbilityType) -> {
            builder.append(" + ").append(additionalAbilityType.name());
        });
        lDisplay.setText(builder.toString());
    }
}
