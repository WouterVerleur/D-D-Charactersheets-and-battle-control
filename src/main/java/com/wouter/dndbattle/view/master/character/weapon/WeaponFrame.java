/*
 * Copyright (C) 2018 wverl
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.wouter.dndbattle.view.master.character.weapon;

import java.awt.event.ItemEvent;

import javax.swing.DefaultComboBoxModel;
import javax.swing.SpinnerNumberModel;

import com.wouter.dndbattle.objects.enums.AbilityType;
import com.wouter.dndbattle.objects.enums.Dice;
import com.wouter.dndbattle.objects.enums.Proficiency;
import com.wouter.dndbattle.objects.impl.AbstractCharacter;
import com.wouter.dndbattle.objects.impl.Weapon;
import com.wouter.dndbattle.utils.Characters;
import com.wouter.dndbattle.utils.GlobalUtils;

/**
 *
 * @author wverl
 */
public class WeaponFrame extends javax.swing.JFrame {

    private final Weapon weapon;
    private final AbstractCharacter character;
    private final boolean isNew;
    private final WeaponsPanel weaponsPanel;

    public WeaponFrame(Weapon weapon, AbstractCharacter character, boolean isNew, WeaponsPanel weaponsPanel) {
        this.weapon = weapon;
        this.character = character;
        this.isNew = isNew;
        this.weaponsPanel = weaponsPanel;
        initComponents();
        setLocationRelativeTo(weaponsPanel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        bgRanged = new javax.swing.ButtonGroup();
        lName = new javax.swing.JLabel();
        lDamage = new javax.swing.JLabel();
        lProficiency = new javax.swing.JLabel();
        lSettings = new javax.swing.JLabel();
        cbProficiency = new javax.swing.JComboBox<>();
        tfName = new javax.swing.JTextField();
        cbAttackDice = new javax.swing.JComboBox<>();
        sAmountOfAttackDice = new javax.swing.JSpinner();
        lDamageModifier = new javax.swing.JLabel();
        tfDamageType = new javax.swing.JTextField();
        cbFinesse = new javax.swing.JCheckBox();
        cbReach = new javax.swing.JCheckBox();
        bSave = new javax.swing.JButton();
        bCancel = new javax.swing.JButton();
        cbRanged = new javax.swing.JCheckBox();
        sRange = new javax.swing.JSpinner();
        lRangeSlash = new javax.swing.JLabel();
        sMaxRange = new javax.swing.JSpinner();
        tfNotes = new javax.swing.JTextField();
        cbLight = new javax.swing.JCheckBox();
        lAttackOverrade = new javax.swing.JLabel();
        tfAttackOverride = new javax.swing.JTextField();
        lDamageOverride = new javax.swing.JLabel();
        tfDamageOverride = new javax.swing.JTextField();
        rbBows = new javax.swing.JRadioButton();
        rbThrown = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        lName.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(lName, gridBagConstraints);

        lDamage.setText("Damage");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(lDamage, gridBagConstraints);

        lProficiency.setText("Proficiency");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(lProficiency, gridBagConstraints);

        lSettings.setText("Settings");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(lSettings, gridBagConstraints);

        cbProficiency.setModel(new DefaultComboBoxModel(Proficiency.values()));
        cbProficiency.setSelectedItem(weapon.getProficiency());
        cbProficiency.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbProficiencyItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(cbProficiency, gridBagConstraints);

        tfName.setText(weapon.getName());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(tfName, gridBagConstraints);

        cbAttackDice.setModel(new DefaultComboBoxModel(Dice.values()));
        cbAttackDice.setSelectedItem(weapon.getAttackDice());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(cbAttackDice, gridBagConstraints);

        sAmountOfAttackDice.setModel(new javax.swing.SpinnerNumberModel(weapon.getAmountOfAttackDice(), 0, null, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(sAmountOfAttackDice, gridBagConstraints);

        lDamageModifier.setText(getWeaponModifier());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(lDamageModifier, gridBagConstraints);

        tfDamageType.setText(weapon.getDamageType());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(tfDamageType, gridBagConstraints);

        cbFinesse.setSelected(weapon.isFinesse());
        cbFinesse.setText("Finesse");
        cbFinesse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFinesseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(cbFinesse, gridBagConstraints);

        cbReach.setSelected(weapon.isReach());
        cbReach.setText("Reach");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(cbReach, gridBagConstraints);

        bSave.setText("Save");
        bSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(bSave, gridBagConstraints);

        bCancel.setText("Cancel");
        bCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        getContentPane().add(bCancel, gridBagConstraints);

        cbRanged.setSelected(weapon.isRanged());
        cbRanged.setText("Ranged");
        cbRanged.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRangedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(cbRanged, gridBagConstraints);

        sRange.setModel(new javax.swing.SpinnerNumberModel(weapon.getRange(), 0, null, 1));
        sRange.setEnabled(weapon.isRanged());
        sRange.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sRangeStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(sRange, gridBagConstraints);

        lRangeSlash.setText("/");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(lRangeSlash, gridBagConstraints);

        sMaxRange.setModel(new javax.swing.SpinnerNumberModel(weapon.getMaxRange(), weapon.getRange(), null, 1));
        sMaxRange.setEnabled(weapon.isRanged());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(sMaxRange, gridBagConstraints);

        tfNotes.setText(weapon.getActualNotes());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(tfNotes, gridBagConstraints);

        cbLight.setSelected(weapon.isLight());
        cbLight.setText("Light");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(cbLight, gridBagConstraints);

        lAttackOverrade.setText("Attack Override");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(lAttackOverrade, gridBagConstraints);

        tfAttackOverride.setText(weapon.getAttackOverride());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(tfAttackOverride, gridBagConstraints);

        lDamageOverride.setText("Damage Override");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(lDamageOverride, gridBagConstraints);

        tfDamageOverride.setText(weapon.getDamageOverride());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(tfDamageOverride, gridBagConstraints);

        bgRanged.add(rbBows);
        rbBows.setSelected(!weapon.isThrown());
        rbBows.setText("Bows");
        rbBows.setEnabled(weapon.isRanged());
        rbBows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbBowsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(rbBows, gridBagConstraints);

        bgRanged.add(rbThrown);
        rbThrown.setSelected(weapon.isThrown());
        rbThrown.setText("Thrown");
        rbThrown.setEnabled(weapon.isRanged());
        rbThrown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbThrownActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(rbThrown, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbFinesseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFinesseActionPerformed
        weapon.setFinesse(cbFinesse.isSelected());
        lDamageModifier.setText(getWeaponModifier());
    }//GEN-LAST:event_cbFinesseActionPerformed

    private void bSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveActionPerformed
        weapon.setName(tfName.getText());
        weapon.setAmountOfAttackDice((int) sAmountOfAttackDice.getValue());
        weapon.setAttackDice((Dice) cbAttackDice.getSelectedItem());
        weapon.setDamageType(tfDamageType.getText());
        weapon.setProficiency((Proficiency) cbProficiency.getSelectedItem());
        weapon.setFinesse(cbFinesse.isSelected());
        weapon.setLight(cbLight.isSelected());
        weapon.setReach(cbReach.isSelected());
        weapon.setRanged(cbRanged.isSelected());
        if (weapon.isRanged()) {
            weapon.setRange((int) sRange.getValue());
            weapon.setMaxRange((int) sMaxRange.getValue());
            weapon.setThrown(rbThrown.isSelected());
        } else {
            weapon.setThrown(false);
            weapon.setRange(0);
            weapon.setMaxRange(0);
        }
        weapon.setActualNotes(tfNotes.getText());
        weapon.setDamageOverride(tfDamageOverride.getText());
        weapon.setAttackOverride(tfAttackOverride.getText());

        if (isNew) {
            character.addWeapon(weapon);
        }
        Characters.updateCharacter(character);
        weaponsPanel.updateAll();
        this.dispose();
    }//GEN-LAST:event_bSaveActionPerformed

    private void bCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_bCancelActionPerformed

    private void sRangeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sRangeStateChanged
        ((SpinnerNumberModel) sMaxRange.getModel()).setMinimum((int) sRange.getValue());
        if ((int) sMaxRange.getValue() < (int) sRange.getValue()) {
            sMaxRange.setValue(((Integer) sRange.getValue()) * 4);
        }
    }//GEN-LAST:event_sRangeStateChanged

    private void cbProficiencyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbProficiencyItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            weapon.setProficiency((Proficiency) cbProficiency.getSelectedItem());
        }
    }//GEN-LAST:event_cbProficiencyItemStateChanged

    private void cbRangedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRangedActionPerformed
        boolean ranged = cbRanged.isSelected();
        sRange.setEnabled(ranged);
        sMaxRange.setEnabled(ranged);
        rbBows.setEnabled(ranged);
        rbThrown.setEnabled(ranged);
        weapon.setRanged(ranged);
        lDamageModifier.setText(getWeaponModifier());
    }//GEN-LAST:event_cbRangedActionPerformed

    private void rbThrownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbThrownActionPerformed
        weapon.setThrown(rbThrown.isSelected());
        lDamageModifier.setText(getWeaponModifier());
    }//GEN-LAST:event_rbThrownActionPerformed

    private void rbBowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbBowsActionPerformed
        rbThrownActionPerformed(evt);
    }//GEN-LAST:event_rbBowsActionPerformed

    private String getWeaponModifier() {
        int modifier = character.getAbilityModifier(AbilityType.STR);
        int dex = character.getAbilityModifier(AbilityType.DEX);
        if (weapon.isRanged()) {
            if (!weapon.isThrown()) {
                modifier = dex;
            }
        } else if (weapon.isFinesse() && dex > modifier) {
            modifier = dex;
        }
        return GlobalUtils.modifierToString(modifier);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCancel;
    private javax.swing.JButton bSave;
    private javax.swing.ButtonGroup bgRanged;
    private javax.swing.JComboBox<String> cbAttackDice;
    private javax.swing.JCheckBox cbFinesse;
    private javax.swing.JCheckBox cbLight;
    private javax.swing.JComboBox<String> cbProficiency;
    private javax.swing.JCheckBox cbRanged;
    private javax.swing.JCheckBox cbReach;
    private javax.swing.JLabel lAttackOverrade;
    private javax.swing.JLabel lDamage;
    private javax.swing.JLabel lDamageModifier;
    private javax.swing.JLabel lDamageOverride;
    private javax.swing.JLabel lName;
    private javax.swing.JLabel lProficiency;
    private javax.swing.JLabel lRangeSlash;
    private javax.swing.JLabel lSettings;
    private javax.swing.JRadioButton rbBows;
    private javax.swing.JRadioButton rbThrown;
    private javax.swing.JSpinner sAmountOfAttackDice;
    private javax.swing.JSpinner sMaxRange;
    private javax.swing.JSpinner sRange;
    private javax.swing.JTextField tfAttackOverride;
    private javax.swing.JTextField tfDamageOverride;
    private javax.swing.JTextField tfDamageType;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfNotes;
    // End of variables declaration//GEN-END:variables
}
