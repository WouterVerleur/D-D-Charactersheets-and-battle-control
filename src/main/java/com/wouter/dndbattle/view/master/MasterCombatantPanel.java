/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.wouter.dndbattle.view.master;

import static com.wouter.dndbattle.utils.Settings.ROLLFORDEATH;

import javax.swing.JOptionPane;

import com.wouter.dndbattle.core.impl.Master;
import com.wouter.dndbattle.objects.ICharacter;
import com.wouter.dndbattle.objects.ICombatant;
import com.wouter.dndbattle.objects.impl.Combatant;
import com.wouter.dndbattle.utils.GlobalUtils;
import com.wouter.dndbattle.utils.Settings;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Wouter
 */
public class MasterCombatantPanel extends javax.swing.JPanel {

    private static final Logger log = LoggerFactory.getLogger(MasterCombatantPanel.class);

    private static final String DAMAGE_RECIEVED_FORMAT = "Total damage recieved: %d";
    private static final Settings SETTINGS = Settings.getInstance();

    private final Combatant combatant;
    private final ICharacter character;
    private final Master master;

    MasterCombatantPanel(Master master, Combatant combatant) {
        this.master = master;
        this.combatant = combatant;
        this.character = getCombatantCharacter(combatant);
        initComponents();
        if (combatant.isDead()) {
            setBackground(GlobalUtils.getBackgroundDead());
        } else if (combatant.getHealth() == 0) {
            setBackground(GlobalUtils.getBackgroundDown());
        }
    }

    private static ICharacter getCombatantCharacter(ICombatant combatant) {
        if (combatant.isTransformed()) {
            return getCombatantCharacter(combatant.getTransformation());
        }
        return combatant.getCharacter();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lName = new javax.swing.JLabel();
        lDescription = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jProgressBar2 = new javax.swing.JProgressBar();
        bDamage = new javax.swing.JButton();
        bHealth = new javax.swing.JButton();
        bTempHitpoints = new javax.swing.JButton();
        bDeathRoll = new javax.swing.JButton();
        bLifeRoll = new javax.swing.JButton();
        bLeaveTransformation = new javax.swing.JButton();
        lTotalDamageRecieved = new javax.swing.JLabel();
        bTransform = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(""), javax.swing.BorderFactory.createEtchedBorder()));

        lName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lName.setText(combatant.getName());

        lDescription.setText(character.getDescription());

        jProgressBar1.setMaximum(character.getMaxHealth());
        jProgressBar1.setValue(combatant.getHealth());
        jProgressBar1.setString(combatant.getHealthString());
        jProgressBar1.setStringPainted(true);

        jProgressBar2.setMaximum(1);
        jProgressBar2.setValue(combatant.getHealthBuff());
        jProgressBar2.setString(combatant.getHealthBuff()>0?"+"+combatant.getHealthBuff():" ");
        jProgressBar2.setStringPainted(true);

        bDamage.setText("Give damage");
        bDamage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDamageActionPerformed(evt);
            }
        });

        bHealth.setText("Give health");
        bHealth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bHealthActionPerformed(evt);
            }
        });

        bTempHitpoints.setText("Set temporary hitpoints");
        bTempHitpoints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTempHitpointsActionPerformed(evt);
            }
        });

        bDeathRoll.setText("Add death roll");
        bDeathRoll.setEnabled(SETTINGS.getProperty(ROLLFORDEATH, true));
        bDeathRoll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeathRollActionPerformed(evt);
            }
        });

        bLifeRoll.setText("Add life roll");
        bLifeRoll.setEnabled(SETTINGS.getProperty(ROLLFORDEATH, true));
        bLifeRoll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLifeRollActionPerformed(evt);
            }
        });

        bLeaveTransformation.setText("Leave transformation");
        bLeaveTransformation.setEnabled(character.isCanTransform() && combatant.isTransformed());
        bLeaveTransformation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLeaveTransformationActionPerformed(evt);
            }
        });

        lTotalDamageRecieved.setText(String.format(DAMAGE_RECIEVED_FORMAT,combatant.getTotalDamageRecieved()));

        bTransform.setText("Transform");
        bTransform.setEnabled(checkCanTransform(combatant));
        bTransform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTransformActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bDeathRoll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bDamage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bLifeRoll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bHealth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lTotalDamageRecieved, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bTransform, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bLeaveTransformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bTempHitpoints, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lDescription)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bDamage)
                        .addComponent(bHealth)
                        .addComponent(lTotalDamageRecieved))
                    .addComponent(bTempHitpoints))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bDeathRoll)
                    .addComponent(bLeaveTransformation)
                    .addComponent(bLifeRoll)
                    .addComponent(bTransform))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bDamageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDamageActionPerformed
        combatant.giveDamage(requestNumber("damage"));
        master.updateAll();
    }//GEN-LAST:event_bDamageActionPerformed

    private void bHealthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bHealthActionPerformed
        combatant.giveHeal(requestNumber("health"));
        master.updateAll();
    }//GEN-LAST:event_bHealthActionPerformed

    private void bTempHitpointsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTempHitpointsActionPerformed
        combatant.setHealthBuff(requestNumber("temporary hitpoints"));
        master.updateAll();
    }//GEN-LAST:event_bTempHitpointsActionPerformed

    private void bDeathRollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeathRollActionPerformed
        combatant.addDeathRoll();
        master.updateAll();
    }//GEN-LAST:event_bDeathRollActionPerformed

    private void bLifeRollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLifeRollActionPerformed
        combatant.addLifeRoll();
        master.updateAll();
    }//GEN-LAST:event_bLifeRollActionPerformed

    private void bLeaveTransformationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLeaveTransformationActionPerformed
        if (combatant.isTransformed()) {
            combatant.leaveTransformation();
        }
        master.updateAll();
    }//GEN-LAST:event_bLeaveTransformationActionPerformed

    private void bTransformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTransformActionPerformed
        if (checkCanTransform(combatant)) {
            TransformFrame transformFrame = new TransformFrame(combatant, master);
            transformFrame.setLocationRelativeTo(this);
            transformFrame.setVisible(true);
        }
    }//GEN-LAST:event_bTransformActionPerformed

    private int requestNumber(String description) {
        int value = 0;
        String input = JOptionPane.showInputDialog(this, "Please enter the amount of " + description + " should be given to " + combatant, "Please enter a number.", JOptionPane.QUESTION_MESSAGE);
        if (input != null && !input.isEmpty()) {
            try {
                value = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                log.error("The input [{}] could not be parsed as a number.", input, e);
                JOptionPane.showMessageDialog(this, "Your input " + input + " is not a valid number.\nTo cancel enter 0.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        return value;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bDamage;
    private javax.swing.JButton bDeathRoll;
    private javax.swing.JButton bHealth;
    private javax.swing.JButton bLeaveTransformation;
    private javax.swing.JButton bLifeRoll;
    private javax.swing.JButton bTempHitpoints;
    private javax.swing.JButton bTransform;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JLabel lDescription;
    private javax.swing.JLabel lName;
    private javax.swing.JLabel lTotalDamageRecieved;
    // End of variables declaration//GEN-END:variables

    private boolean checkCanTransform(Combatant combatant) {
        if (combatant.isTransformed()) {
            return checkCanTransform(combatant.getTransformation());
        }
        return combatant.getCharacter().isCanTransform();
    }
}
