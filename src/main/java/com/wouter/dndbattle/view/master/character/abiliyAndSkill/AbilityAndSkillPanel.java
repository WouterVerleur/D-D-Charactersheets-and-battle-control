/*
 * Copyright (C) 2018 Wouter
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.wouter.dndbattle.view.master.character.abiliyAndSkill;

import java.awt.Component;

import javax.swing.JPanel;

import com.wouter.dndbattle.objects.enums.AbilityType;
import com.wouter.dndbattle.objects.enums.SkillType;
import com.wouter.dndbattle.objects.impl.AbstractCharacter;
import com.wouter.dndbattle.objects.impl.AbstractExtendedCharacter;
import com.wouter.dndbattle.utils.Characters;
import com.wouter.dndbattle.utils.GlobalUtils;
import com.wouter.dndbattle.view.master.character.CharacterPanel;
import com.wouter.dndbattle.view.master.character.IUpdateablePanel;
import static java.awt.event.ItemEvent.SELECTED;

/**
 *
 * @author Wouter
 */
public class AbilityAndSkillPanel extends javax.swing.JPanel implements IUpdateablePanel {

    private final AbstractCharacter character;
    private final CharacterPanel characterPanel;

    public AbilityAndSkillPanel(AbstractCharacter character, CharacterPanel characterPanel) {
        this.character = character;
        this.characterPanel = characterPanel;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spAbility = new javax.swing.JScrollPane();
        pAbility = new javax.swing.JPanel();
        spSavingThrow = new javax.swing.JScrollPane();
        pSavingThrow = new javax.swing.JPanel();
        spSkill = new javax.swing.JScrollPane();
        pSkill = new javax.swing.JPanel();
        pHealth = new javax.swing.JPanel();
        sHealth = new javax.swing.JSpinner();
        pPassiveWisdom = new javax.swing.JPanel();
        lPassiveWisdomModifier = new javax.swing.JLabel();
        pInitiative = new javax.swing.JPanel();
        lInitiative = new javax.swing.JLabel();
        pProficiency = new javax.swing.JPanel();
        lProficiency = new javax.swing.JLabel();
        pArmorClass = new javax.swing.JPanel();
        bArmorClass = new javax.swing.JButton();
        pChallengeRating1 = new javax.swing.JPanel();
        cbChallengeRating = new com.wouter.dndbattle.view.comboboxes.ChallengeRatingComboBox();
        pHitDice = new javax.swing.JPanel();
        lHitDice = new javax.swing.JLabel();
        pTransform = new javax.swing.JPanel();
        cbCanTransform = new javax.swing.JCheckBox();
        cbTransformClass = new com.wouter.dndbattle.view.comboboxes.ClassComboBox();
        cbTransformChallengeRating = new com.wouter.dndbattle.view.comboboxes.ChallengeRatingComboBox();

        pAbility.setLayout(new java.awt.GridLayout(0, 1));

        for (AbilityType abilityType : AbilityType.values()){
            pAbility.add(new AbilityPanel(character, abilityType, this));
        }

        spAbility.setViewportView(pAbility);

        pSavingThrow.setLayout(new java.awt.GridLayout(0, 1));

        for (AbilityType abilityType : AbilityType.values()){
            pSavingThrow.add(new SavingThrowPanel(character, abilityType, this));
        }

        spSavingThrow.setViewportView(pSavingThrow);

        pSkill.setLayout(new java.awt.GridLayout(0, 1));

        for (SkillType skillType : SkillType.values()){
            pSkill.add(new SkillPanel(character, skillType, this));
        }

        spSkill.setViewportView(pSkill);

        pHealth.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Health", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        sHealth.setModel(new javax.swing.SpinnerNumberModel(character.getMaxHealth(), 1, null, 1));
        sHealth.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sHealthStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pHealthLayout = new javax.swing.GroupLayout(pHealth);
        pHealth.setLayout(pHealthLayout);
        pHealthLayout.setHorizontalGroup(
            pHealthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sHealth)
        );
        pHealthLayout.setVerticalGroup(
            pHealthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sHealth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pPassiveWisdom.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Passive Wisdom", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        pPassiveWisdom.setMinimumSize(new java.awt.Dimension(100, 40));
        pPassiveWisdom.setPreferredSize(new java.awt.Dimension(100, 40));

        lPassiveWisdomModifier.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lPassiveWisdomModifier.setText(Integer.toString(character.getPassiveWisdom()));

        javax.swing.GroupLayout pPassiveWisdomLayout = new javax.swing.GroupLayout(pPassiveWisdom);
        pPassiveWisdom.setLayout(pPassiveWisdomLayout);
        pPassiveWisdomLayout.setHorizontalGroup(
            pPassiveWisdomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lPassiveWisdomModifier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pPassiveWisdomLayout.setVerticalGroup(
            pPassiveWisdomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pPassiveWisdomLayout.createSequentialGroup()
                .addComponent(lPassiveWisdomModifier)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pInitiative.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Initiative", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        pInitiative.setMinimumSize(new java.awt.Dimension(100, 40));

        lInitiative.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lInitiative.setText(GlobalUtils.modifierToString(character.getInitiative()));

        javax.swing.GroupLayout pInitiativeLayout = new javax.swing.GroupLayout(pInitiative);
        pInitiative.setLayout(pInitiativeLayout);
        pInitiativeLayout.setHorizontalGroup(
            pInitiativeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lInitiative, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pInitiativeLayout.setVerticalGroup(
            pInitiativeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lInitiative)
        );

        pProficiency.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Proficiency", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        lProficiency.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lProficiency.setText(GlobalUtils.modifierToString(character.getProficiencyScore()));

        javax.swing.GroupLayout pProficiencyLayout = new javax.swing.GroupLayout(pProficiency);
        pProficiency.setLayout(pProficiencyLayout);
        pProficiencyLayout.setHorizontalGroup(
            pProficiencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lProficiency, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pProficiencyLayout.setVerticalGroup(
            pProficiencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lProficiency)
        );

        pArmorClass.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Armor Class", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        bArmorClass.setText(character.getArmorClassString());
        bArmorClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bArmorClassActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pArmorClassLayout = new javax.swing.GroupLayout(pArmorClass);
        pArmorClass.setLayout(pArmorClassLayout);
        pArmorClassLayout.setHorizontalGroup(
            pArmorClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bArmorClass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pArmorClassLayout.setVerticalGroup(
            pArmorClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pArmorClassLayout.createSequentialGroup()
                .addComponent(bArmorClass)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pChallengeRating1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Challenge Rating", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        pChallengeRating1.setEnabled(character.hasChallengeRating());

        cbChallengeRating.setSelectedItem(character.getChallengeRating());
        cbChallengeRating.setEnabled(character.hasChallengeRating());
        cbChallengeRating.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbChallengeRatingItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pChallengeRating1Layout = new javax.swing.GroupLayout(pChallengeRating1);
        pChallengeRating1.setLayout(pChallengeRating1Layout);
        pChallengeRating1Layout.setHorizontalGroup(
            pChallengeRating1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cbChallengeRating, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pChallengeRating1Layout.setVerticalGroup(
            pChallengeRating1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pChallengeRating1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(cbChallengeRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pHitDice.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Hit dice", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        lHitDice.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lHitDice.setText(getHitDiceText());

        javax.swing.GroupLayout pHitDiceLayout = new javax.swing.GroupLayout(pHitDice);
        pHitDice.setLayout(pHitDiceLayout);
        pHitDiceLayout.setHorizontalGroup(
            pHitDiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lHitDice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pHitDiceLayout.setVerticalGroup(
            pHitDiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lHitDice)
        );

        pTransform.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Transformation", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        pTransform.setEnabled(character.hasChallengeRating());

        cbCanTransform.setSelected(character.isCanTransform());
        cbCanTransform.setText("Can transform");
        cbCanTransform.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cbCanTransform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCanTransformActionPerformed(evt);
            }
        });

        cbTransformClass.setSelectedItem(character.getTransformType());
        cbTransformClass.setEnabled(character.isCanTransform());
        cbTransformClass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbTransformClassItemStateChanged(evt);
            }
        });

        cbTransformChallengeRating.setSelectedItem(character.getTransformChallengeRating());
        cbTransformChallengeRating.setEnabled(character.isCanTransform());
        cbTransformChallengeRating.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbTransformChallengeRatingItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pTransformLayout = new javax.swing.GroupLayout(pTransform);
        pTransform.setLayout(pTransformLayout);
        pTransformLayout.setHorizontalGroup(
            pTransformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cbCanTransform, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
            .addComponent(cbTransformClass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cbTransformChallengeRating, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pTransformLayout.setVerticalGroup(
            pTransformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pTransformLayout.createSequentialGroup()
                .addComponent(cbCanTransform)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbTransformClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbTransformChallengeRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spAbility, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spSavingThrow, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spSkill, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pTransform, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pHitDice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pArmorClass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pProficiency, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pInitiative, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pPassiveWisdom, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                    .addComponent(pHealth, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pChallengeRating1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(spAbility, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spSavingThrow, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(pHealth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pPassiveWisdom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pInitiative, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pProficiency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pArmorClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pHitDice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pTransform, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pChallengeRating1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 68, Short.MAX_VALUE))
                    .addComponent(spSkill, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sHealthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sHealthStateChanged
        character.setMaxHealth((int) sHealth.getValue());
        Characters.updateCharacter(character);
        updatePanels();
    }//GEN-LAST:event_sHealthStateChanged

    private void cbChallengeRatingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbChallengeRatingItemStateChanged
        if (evt.getStateChange() == SELECTED) {
            character.setChallengeRating(cbChallengeRating.getSelectedItem());
            Characters.updateCharacter(character);
            updatePanels();
        }
    }//GEN-LAST:event_cbChallengeRatingItemStateChanged

    private void cbCanTransformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCanTransformActionPerformed
        boolean canTransform = cbCanTransform.isSelected();
        character.setCanTransform(canTransform);
        cbTransformChallengeRating.setEnabled(canTransform);
        cbTransformClass.setEnabled(canTransform);
        Characters.updateCharacter(character);
    }//GEN-LAST:event_cbCanTransformActionPerformed

    private void cbTransformClassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbTransformClassItemStateChanged
        if (evt.getStateChange() == SELECTED) {
            character.setTransformType(cbTransformClass.getSelectedItem());
            Characters.updateCharacter(character);
        }
    }//GEN-LAST:event_cbTransformClassItemStateChanged

    private void cbTransformChallengeRatingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbTransformChallengeRatingItemStateChanged
        if (evt.getStateChange() == SELECTED) {
            character.setTransformChallengeRating(cbTransformChallengeRating.getSelectedItem());
            Characters.updateCharacter(character);
        }
    }//GEN-LAST:event_cbTransformChallengeRatingItemStateChanged

    private void bArmorClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bArmorClassActionPerformed
        ArmorFrame armorFrame = new ArmorFrame(character, this);
        armorFrame.setLocationRelativeTo(this);
        armorFrame.setVisible(true);
    }//GEN-LAST:event_bArmorClassActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bArmorClass;
    private javax.swing.JCheckBox cbCanTransform;
    private com.wouter.dndbattle.view.comboboxes.ChallengeRatingComboBox cbChallengeRating;
    private com.wouter.dndbattle.view.comboboxes.ChallengeRatingComboBox cbTransformChallengeRating;
    private com.wouter.dndbattle.view.comboboxes.ClassComboBox cbTransformClass;
    private javax.swing.JLabel lHitDice;
    private javax.swing.JLabel lInitiative;
    private javax.swing.JLabel lPassiveWisdomModifier;
    private javax.swing.JLabel lProficiency;
    private javax.swing.JPanel pAbility;
    private javax.swing.JPanel pArmorClass;
    private javax.swing.JPanel pChallengeRating1;
    private javax.swing.JPanel pHealth;
    private javax.swing.JPanel pHitDice;
    private javax.swing.JPanel pInitiative;
    private javax.swing.JPanel pPassiveWisdom;
    private javax.swing.JPanel pProficiency;
    private javax.swing.JPanel pSavingThrow;
    private javax.swing.JPanel pSkill;
    private javax.swing.JPanel pTransform;
    private javax.swing.JSpinner sHealth;
    private javax.swing.JScrollPane spAbility;
    private javax.swing.JScrollPane spSavingThrow;
    private javax.swing.JScrollPane spSkill;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update() {
        lPassiveWisdomModifier.setText(Integer.toString(character.getPassiveWisdom()));
        lInitiative.setText(GlobalUtils.modifierToString(character.getInitiative()));
        bArmorClass.setText(character.getArmorClassString());
        lProficiency.setText(GlobalUtils.modifierToString(character.getProficiencyScore()));
        lHitDice.setText(getHitDiceText());
        updatePanels(pAbility);
        updatePanels(pSavingThrow);
        updatePanels(pSkill);
    }

    private String getHitDiceText() {
        if (character instanceof AbstractExtendedCharacter) {
            return ((AbstractExtendedCharacter) character).getHitDice();
        }
        return " ";
    }

    public void updatePanels() {
        characterPanel.updateAll();
    }

    private void updatePanels(JPanel panel) {
        for (Component component : panel.getComponents()) {
            if (component instanceof IUpdateablePanel) {
                ((IUpdateablePanel) component).update();
            }
        }
    }
}
