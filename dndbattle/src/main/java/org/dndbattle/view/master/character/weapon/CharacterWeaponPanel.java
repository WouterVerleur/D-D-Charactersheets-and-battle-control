/*
 * Copyright (C) 2018 Wouter
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.wouter.dndbattle.view.master.character.weapon;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.util.List;

import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import com.wouter.dndbattle.objects.IWeapon;
import com.wouter.dndbattle.objects.enums.WeaponType;
import com.wouter.dndbattle.objects.impl.AbstractCharacter;
import com.wouter.dndbattle.objects.impl.Weapon;
import com.wouter.dndbattle.utils.Characters;
import com.wouter.dndbattle.utils.GlobalUtils;
import com.wouter.dndbattle.utils.Weapons;
import com.wouter.dndbattle.view.IUpdateablePanel;
import com.wouter.dndbattle.view.master.weapons.WeaponEditPanel;

/**
 *
 * @author Wouter
 */
public class CharacterWeaponPanel extends javax.swing.JPanel implements IUpdateablePanel {

    private final AbstractCharacter character;
    private final AbstractCharacter.WeaponProficiency weaponProficiency;

    public CharacterWeaponPanel(AbstractCharacter character) {
        this.character = character;
        this.weaponProficiency = character.getWeaponProficiency();
        initComponents();
        updatePrivateWeaponsTable();
    }

    @Override
    public void update() {
        for (Component component : pWeapons.getComponents()) {
            if (component instanceof WeaponCheckBox) {
                ((WeaponCheckBox) component).updateCheckBox();
            }
        }
        updatePrivateWeaponsTable();
    }

    private void updatePrivateWeaponsTable() {
        DefaultTableModel model = (DefaultTableModel) tPrivateWeapons.getModel();
        model.setRowCount(0);

        character.getPrivateWeapons().forEach((privateWeapon) -> {
            model.addRow(GlobalUtils.getWeaponRow(character, privateWeapon));
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        bgType = new javax.swing.ButtonGroup();
        tpWeapons = new javax.swing.JTabbedPane();
        spRegularWeapons = new javax.swing.JScrollPane();
        pRegularWeapons = new javax.swing.JPanel();
        cbAllWeapons = new javax.swing.JCheckBox();
        sTop = new javax.swing.JSeparator();
        rbNone = new javax.swing.JRadioButton();
        rbSimple = new javax.swing.JRadioButton();
        rbMartial = new javax.swing.JRadioButton();
        sBottom = new javax.swing.JSeparator();
        spWeapons = new javax.swing.JScrollPane();
        pWeapons = new javax.swing.JPanel();
        spPrivateWeapons = new javax.swing.JScrollPane();
        pPrivateWeapons = new javax.swing.JPanel();
        spPrivateWeaponsTable = new javax.swing.JScrollPane();
        tPrivateWeapons = new javax.swing.JTable();
        bNewPrivateWeapon = new javax.swing.JButton();
        bEditPrivateWeapon = new javax.swing.JButton();
        bDeletePrivateWeapon = new javax.swing.JButton();

        pRegularWeapons.setLayout(new java.awt.GridBagLayout());

        cbAllWeapons.setSelected(weaponProficiency.isAllWeapons());
        cbAllWeapons.setText("All weapons");
        cbAllWeapons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAllWeaponsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pRegularWeapons.add(cbAllWeapons, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pRegularWeapons.add(sTop, gridBagConstraints);

        bgType.add(rbNone);
        rbNone.setSelected(weaponProficiency.getType()==null);
        rbNone.setText("None");
        rbNone.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbNoneItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        pRegularWeapons.add(rbNone, gridBagConstraints);

        bgType.add(rbSimple);
        rbSimple.setSelected(weaponProficiency.getType()==WeaponType.SIMPLE);
        rbSimple.setText("Simple");
        rbSimple.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbSimpleItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        pRegularWeapons.add(rbSimple, gridBagConstraints);

        bgType.add(rbMartial);
        rbMartial.setSelected(weaponProficiency.getType()==WeaponType.MARTIAL);
        rbMartial.setText("Martial");
        rbMartial.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbMartialItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pRegularWeapons.add(rbMartial, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pRegularWeapons.add(sBottom, gridBagConstraints);

        pWeapons.setLayout(new java.awt.GridLayout(0, 3));

        for (IWeapon weapon : Weapons.getInstance().getAll()){
            pWeapons.add(new WeaponCheckBox(weapon));
        }

        spWeapons.setViewportView(pWeapons);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pRegularWeapons.add(spWeapons, gridBagConstraints);

        spRegularWeapons.setViewportView(pRegularWeapons);

        tpWeapons.addTab("Regular Weapons", spRegularWeapons);

        pPrivateWeapons.setLayout(new java.awt.GridBagLayout());

        tPrivateWeapons.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Proficient", "Attack", "Damage", "Notes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tPrivateWeapons.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        spPrivateWeaponsTable.setViewportView(tPrivateWeapons);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        pPrivateWeapons.add(spPrivateWeaponsTable, gridBagConstraints);

        bNewPrivateWeapon.setText("New");
        bNewPrivateWeapon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNewPrivateWeaponActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pPrivateWeapons.add(bNewPrivateWeapon, gridBagConstraints);

        bEditPrivateWeapon.setText("Edit");
        bEditPrivateWeapon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEditPrivateWeaponActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pPrivateWeapons.add(bEditPrivateWeapon, gridBagConstraints);

        bDeletePrivateWeapon.setText("Delete");
        bDeletePrivateWeapon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeletePrivateWeaponActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        pPrivateWeapons.add(bDeletePrivateWeapon, gridBagConstraints);

        spPrivateWeapons.setViewportView(pPrivateWeapons);

        tpWeapons.addTab("Personal Weapons", spPrivateWeapons);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpWeapons, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpWeapons, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rbNoneItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbNoneItemStateChanged
        if (rbNone.isSelected()) {
            weaponProficiency.setType(null);
            saveCharacterAndUpdate();
        }
    }//GEN-LAST:event_rbNoneItemStateChanged

    private void rbSimpleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbSimpleItemStateChanged
        if (rbSimple.isSelected()) {
            weaponProficiency.setType(WeaponType.SIMPLE);
            saveCharacterAndUpdate();
        }
    }//GEN-LAST:event_rbSimpleItemStateChanged

    private void rbMartialItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbMartialItemStateChanged
        if (rbMartial.isSelected()) {
            weaponProficiency.setType(WeaponType.MARTIAL);
            saveCharacterAndUpdate();
        }
    }//GEN-LAST:event_rbMartialItemStateChanged

    private void cbAllWeaponsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAllWeaponsActionPerformed
        weaponProficiency.setAllWeapons(cbAllWeapons.isSelected());
        saveCharacterAndUpdate();
    }//GEN-LAST:event_cbAllWeaponsActionPerformed

    private void bNewPrivateWeaponActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNewPrivateWeaponActionPerformed
        editPrivateWeapon(new Weapon(WeaponType.PERSONAL));
    }//GEN-LAST:event_bNewPrivateWeaponActionPerformed

    private void bEditPrivateWeaponActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEditPrivateWeaponActionPerformed
        Weapon weapon = getSelectedPrivateWeapon();
        if (weapon != null) {
            editPrivateWeapon(weapon);
        }
    }//GEN-LAST:event_bEditPrivateWeaponActionPerformed

    private void bDeletePrivateWeaponActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeletePrivateWeaponActionPerformed
        Weapon selectedPrivateWeapon = getSelectedPrivateWeapon();
        if (selectedPrivateWeapon != null) {
            int userInput = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the personal weapon " + selectedPrivateWeapon.getName() + "?\n\nThis cannot be undone.", "Please confirm", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (userInput == JOptionPane.YES_OPTION) {
                character.removePrivateWeapon(selectedPrivateWeapon);
                saveCharacterAndUpdate();
            }
        }
    }//GEN-LAST:event_bDeletePrivateWeaponActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bDeletePrivateWeapon;
    private javax.swing.JButton bEditPrivateWeapon;
    private javax.swing.JButton bNewPrivateWeapon;
    private javax.swing.ButtonGroup bgType;
    private javax.swing.JCheckBox cbAllWeapons;
    private javax.swing.JPanel pPrivateWeapons;
    private javax.swing.JPanel pRegularWeapons;
    private javax.swing.JPanel pWeapons;
    private javax.swing.JRadioButton rbMartial;
    private javax.swing.JRadioButton rbNone;
    private javax.swing.JRadioButton rbSimple;
    private javax.swing.JSeparator sBottom;
    private javax.swing.JSeparator sTop;
    private javax.swing.JScrollPane spPrivateWeapons;
    private javax.swing.JScrollPane spPrivateWeaponsTable;
    private javax.swing.JScrollPane spRegularWeapons;
    private javax.swing.JScrollPane spWeapons;
    private javax.swing.JTable tPrivateWeapons;
    private javax.swing.JTabbedPane tpWeapons;
    // End of variables declaration//GEN-END:variables

    private void saveCharacterAndUpdate() {
        saveCharacter();
        update();
    }

    private void saveCharacter() {
        Characters.getInstance().update(character);
    }

    private void editPrivateWeapon(Weapon weapon) {
        WeaponEditPanel weaponEditPanel = new WeaponEditPanel(weapon);
        switch (JOptionPane.showConfirmDialog(this, weaponEditPanel, "Edit personal weapon", JOptionPane.OK_CANCEL_OPTION)) {
            case JOptionPane.OK_OPTION:
                Weapon newWeapon = weaponEditPanel.getWeapon();
                if (!character.getPrivateWeapons().contains(newWeapon)) {
                    character.addPrivateWeapon(newWeapon);
                }
                saveCharacterAndUpdate();
            default:
                break;
        }
    }

    private Weapon getSelectedPrivateWeapon() {
        int selection = tPrivateWeapons.getSelectedRow();
        List<IWeapon> privateWeapons = character.getPrivateWeapons();
        if (selection >= 0 && selection < privateWeapons.size()) {
            IWeapon selectedWeapon = privateWeapons.get(selection);
            if (selectedWeapon instanceof Weapon) {
                return (Weapon) selectedWeapon;
            }
        }
        return null;
    }

    private class WeaponCheckBox extends JCheckBox {

        private final IWeapon weapon;

        public WeaponCheckBox(IWeapon weapon) {
            this.weapon = weapon;
            addActionListener((ActionEvent e) -> {
                if (isSelected()) {
                    weaponProficiency.addWeapon(weapon);
                } else {
                    weaponProficiency.removeWeapon(weapon);
                }
                updateCheckBox();
                saveCharacter();
            });
            setSelected(weaponProficiency.getWeapons().contains(weapon));
            updateCheckBox();
        }

        private void updateCheckBox() {
            final boolean proficient = weaponProficiency.isProficient(weapon);
            Object[] weaponRow = GlobalUtils.getWeaponRow(character, weapon);
            setText(weaponRow[GlobalUtils.NAME] + " (" + weaponRow[GlobalUtils.ATTACK] + " / " + weaponRow[GlobalUtils.DAMAGE] + ")");
            if (!isSelected() && proficient) {
                setEnabled(false);
            } else {
                setEnabled(true);
            }
        }
    }
}
