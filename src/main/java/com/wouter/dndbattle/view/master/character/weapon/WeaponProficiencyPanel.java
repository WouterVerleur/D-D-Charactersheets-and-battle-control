/*
 * Copyright (C) 2018 Wouter
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.wouter.dndbattle.view.master.character.weapon;

import java.awt.Component;
import java.awt.event.ActionEvent;

import javax.swing.JCheckBox;

import com.wouter.dndbattle.objects.IWeapon;
import com.wouter.dndbattle.objects.enums.WeaponType;
import com.wouter.dndbattle.objects.impl.AbstractCharacter;
import com.wouter.dndbattle.utils.Characters;
import com.wouter.dndbattle.utils.Weapons;
import com.wouter.dndbattle.view.IUpdateablePanel;

/**
 *
 * @author Wouter
 */
public class WeaponProficiencyPanel extends javax.swing.JPanel implements IUpdateablePanel {

    private final AbstractCharacter character;
    private final AbstractCharacter.WeaponProficiency weaponProficiency;

    public WeaponProficiencyPanel(AbstractCharacter character) {
        this.character = character;
        this.weaponProficiency = character.getWeaponProficiency();
        initComponents();
    }

    @Override
    public void update() {
        for (Component component : pWeapons.getComponents()) {
            if (component instanceof WeaponCheckBox) {
                ((WeaponCheckBox) component).update();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        bgType = new javax.swing.ButtonGroup();
        cbAllWeapons = new javax.swing.JCheckBox();
        sTop = new javax.swing.JSeparator();
        rbNone = new javax.swing.JRadioButton();
        rbSimple = new javax.swing.JRadioButton();
        rbMartial = new javax.swing.JRadioButton();
        sBottom = new javax.swing.JSeparator();
        spWeapons = new javax.swing.JScrollPane();
        pWeapons = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        cbAllWeapons.setSelected(weaponProficiency.isAllWeapons());
        cbAllWeapons.setText("All weapons");
        cbAllWeapons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAllWeaponsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(cbAllWeapons, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(sTop, gridBagConstraints);

        bgType.add(rbNone);
        rbNone.setSelected(weaponProficiency.getType()==null);
        rbNone.setText("None");
        rbNone.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbNoneItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(rbNone, gridBagConstraints);

        bgType.add(rbSimple);
        rbSimple.setSelected(weaponProficiency.getType()==WeaponType.SIMPLE);
        rbSimple.setText("Simple");
        rbSimple.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbSimpleItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(rbSimple, gridBagConstraints);

        bgType.add(rbMartial);
        rbMartial.setSelected(weaponProficiency.getType()==WeaponType.MARTIAL);
        rbMartial.setText("Martial");
        rbMartial.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbMartialItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(rbMartial, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(sBottom, gridBagConstraints);

        pWeapons.setLayout(new java.awt.GridLayout(0, 3));

        for (IWeapon weapon : Weapons.getInstance().getAll()){
            pWeapons.add(new WeaponCheckBox(weapon));
        }

        spWeapons.setViewportView(pWeapons);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(spWeapons, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void rbNoneItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbNoneItemStateChanged
        if (rbNone.isSelected()) {
            weaponProficiency.setType(null);
            saveCharacterAndUpdate();
        }
    }//GEN-LAST:event_rbNoneItemStateChanged

    private void rbSimpleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbSimpleItemStateChanged
        if (rbSimple.isSelected()) {
            weaponProficiency.setType(WeaponType.SIMPLE);
            saveCharacterAndUpdate();
        }
    }//GEN-LAST:event_rbSimpleItemStateChanged

    private void rbMartialItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbMartialItemStateChanged
        if (rbMartial.isSelected()) {
            weaponProficiency.setType(WeaponType.MARTIAL);
            saveCharacterAndUpdate();
        }
    }//GEN-LAST:event_rbMartialItemStateChanged

    private void cbAllWeaponsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAllWeaponsActionPerformed
        weaponProficiency.setAllWeapons(cbAllWeapons.isSelected());
        saveCharacterAndUpdate();
    }//GEN-LAST:event_cbAllWeaponsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgType;
    private javax.swing.JCheckBox cbAllWeapons;
    private javax.swing.JPanel pWeapons;
    private javax.swing.JRadioButton rbMartial;
    private javax.swing.JRadioButton rbNone;
    private javax.swing.JRadioButton rbSimple;
    private javax.swing.JSeparator sBottom;
    private javax.swing.JSeparator sTop;
    private javax.swing.JScrollPane spWeapons;
    // End of variables declaration//GEN-END:variables

    private void saveCharacterAndUpdate() {
        saveCharacter();
        update();
    }

    private void saveCharacter() {
        Characters.getInstance().update(character);
    }

    private class WeaponCheckBox extends JCheckBox {

        private static final String PROFICIENT = " (Proficient)";

        private final IWeapon weapon;

        public WeaponCheckBox(IWeapon weapon) {
            this.weapon = weapon;
            addActionListener((ActionEvent e) -> {
                if (isSelected()) {
                    weaponProficiency.addWeapon(weapon);
                } else {
                    weaponProficiency.removeWeapon(weapon);
                }
                update();
                saveCharacter();
            });
            setSelected(weaponProficiency.getWeapons().contains(weapon));
            update();
        }

        private void update() {
            final boolean proficient = weaponProficiency.isProficient(weapon);
            setText(weapon.getName() + (proficient ? PROFICIENT : ""));
            if (!isSelected() && proficient) {
                setEnabled(false);
            } else {
                setEnabled(true);
            }
        }
    }
}
