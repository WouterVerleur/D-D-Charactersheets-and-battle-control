/*
 * Copyright (C) 2018 Wouter
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.dndbattle.view.client.character;

import static org.dndbattle.objects.enums.Dice.D20;

import org.dndbattle.objects.ICharacter;
import org.dndbattle.objects.enums.SkillType;
import org.dndbattle.utils.GlobalUtils;
import org.dndbattle.view.DicePopup;
import org.dndbattle.view.IUpdateablePanel;

/**
 *
 * @author Wouter
 */
public class ClientSkillPanel extends javax.swing.JPanel implements IUpdateablePanel {

  private final SkillType skillType;
  private final ICharacter character;

  public ClientSkillPanel(ICharacter character, SkillType skillType) {
    this.character = character;
    this.skillType = skillType;
    initComponents();
    updateLabel();
  }

  @Override
  public void update() {
    updateLabel();
  }

  private void updateLabel() {
    lModifier.setText(GlobalUtils.modifierToString(character.getSkillModifier(skillType)));
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    lName = new javax.swing.JLabel();
    lModifier = new javax.swing.JLabel();

    setBorder(javax.swing.BorderFactory.createTitledBorder(skillType.toString()));

    lName.setText(character.getSkillProficiency(skillType).toString());

    lModifier.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lModifier.setText(GlobalUtils.modifierToString(character.getSkillModifier(skillType)));
    lModifier.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        lModifierMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addComponent(lName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(lModifier))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
        .addComponent(lModifier)
        .addComponent(lName))
    );
  }// </editor-fold>//GEN-END:initComponents

    private void lModifierMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lModifierMouseClicked
    DicePopup dicePopup = new DicePopup(character.getSkillModifier(skillType), D20, skillType.toString());
    dicePopup.setLocationRelativeTo(lModifier);
    dicePopup.setVisible(true);
    }//GEN-LAST:event_lModifierMouseClicked

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel lModifier;
  private javax.swing.JLabel lName;
  // End of variables declaration//GEN-END:variables
}
